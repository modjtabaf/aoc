
#include <iostream>
#include <iterator>
#include <string>
#include <utility>
#include <vector>
#include <array>
#include <algorithm>

using RawMap = std::vector<std::string>;
using MapRow = std::vector<char>;
using Map = std::vector<MapRow>;

RawMap raw_sample_map{
    "....#.....",
    ".........#",
    "..........",
    "..#.......",
    ".......#..",
    "..........",
    ".#..^.....",
    "........#.",
    "#.........",
    "......#...",
};

RawMap raw_map{
    "......................#...#..............#.....................................#...#..............##..............................",
    "......#.....#................#....#...........#........#......................#...............................#.....#.#.###..#...#",
    "...#.#.................#........#.................#.........................................................#.....................",
    ".....................................................................................................#.........#..................",
    ".............................#.................#...................................#.....#....#........................#....#.....",
    "..........................#.....................................................................#..#.............#................",
    ".................#...........................#..........................#..............................#.#..#...................#.",
    "..#....#....#......................................................................#....#.........................................",
    "..................................#............#...........#...........................................#.#....#.............#.#...",
    "...#...##....................................................................................#..........#..................#......",
    "..................#.....#......#.....#...#.........#..#.............................#....##.............#...............##.#..#...",
    "......#...............................................................................................................#..........#",
    "...........#................................#.......#.............#...............#...................................#...........",
    "............##...........................#........................................................................#...............",
    "...............................#........#...#.................................#..#.#.............#...........#....................",
    "........#..........#.#....................................................#........#....#..#.................................#....",
    ".........#..............#........................#................................................................................",
    "..................#..........................#.............#..................#.#...........#.....#...............................",
    "...#...........#.#..........#.....................................................................................................",
    "..............#.................#.....................................................................#...#......#.....#..........",
    "..#.....#................................................................................................#.#.....#..........#.....",
    "#.#..........#...#.............................#...............#..................................................#.#.............",
    "..........................#..#.............#................................................................................#.....",
    "...#..............................................................................................#..............#..#.......#.....",
    "........................................#......#........................................#...................##...........#........",
    ".............#..............#...........................##...#............#.....#..#..............................................",
    "..#....#..#...............#........#.................#............................................#........##...............#.....",
    "................................................#.......#...........##.............................#.##...........................",
    "............................#..............#..#...........#...#.....#.#...................#.....#.............................#...",
    "....................#....................................................................................#........................",
    ".......................................................................................#.......................##..#..............",
    "#.............................#.............................................................#............................#........",
    "..............................................................................#.............#...#.........##......................",
    "...............#..........................#.............#............#...........................................#................",
    "................#........................#................................#...#............#.............................#........",
    "..............................................................#.....#..........#.......#........#....#..................#.........",
    "........................................................#..............................................................#.......#..",
    "..#........#............#........#...#.....#.......#..............................................................................",
    "..#..............#.#.....................................#..................................................#....##...............",
    "............#........................#..........##.................................................................#........#.....",
    "............#............#.#...............................................#.......#..............................................",
    "..................#.........................................#............................#......#..................#...........#..",
    "........................................................#.............##................................#........................#",
    ".....................#...#......#.......#............#........#..................#...#.#....................................#.....",
    "...........................................................................................#..............................#....#..",
    "....#...................#.............#..........#..................................#.............................................",
    "......................................#...............................................#..#........................................",
    ".................#..#............................................#.............................................................#.#",
    "............##...................................................................................#.........................#......",
    ".........#.................................................#..#........................................#.....#..........#.....#...",
    ".........#........................................................................................#.#...............#............#",
    "..........#..#...........#...................#.....#.......#......#....#..#.......................#..........#..........#.........",
    "......#...................................................#....#..............#....#.........##...#...............................",
    ".........#........#........................#...........................................................#.......#................#.",
    ".....................#...............................................#.##.........................................................",
    "................................................................................#.............#..............#............#.......",
    "......#..........#............................................#...#....................#...............................#.........#",
    "......................................#....#.........#..............................................................#...#.........",
    ".......##...#.#..........................................................#............#...........#........#...................#..",
    ".....#............................................................................#............................#..................",
    "....#..................#....#......#......#......................#......................#.......................................#.",
    "..#..............#..#............#.................................#............#..................#................#.............",
    "........................................................#....#...................................##.......................#.......",
    "..........#..................................#....#........#.......#..........................#................#...............#..",
    ".....................................#.................#..................#...........#...........................................",
    ".........#..............#...................................................................................#...................#.",
    ".................##.................................#.......#.......................................................#.........#...",
    "...........#.................#..........................#...............................#..#...........................#..........",
    ".....................................#...........................#...................#..............................#..#..........",
    ".............................#.....#.................................................#.................##...............#.......#.",
    "............#.........................................................................................................#...........",
    "..........##.............#...................#.#...........................................#....................................##",
    "..........#..#...#...............#........#........................................................#.................#............",
    "....................#......................#....................................................#.#.....................#.........",
    ".......................................#............#........................##............#....#..#..............................",
    "..........#..........#.....................................#.................................#.......#............................",
    "....#.............#...............................................................................................................",
    "..#..............................................#....#......#........................................#.................#.........",
    "...#......#.....#..............................#....#....................#......#..................#...................#.......#..",
    "...............#..#...........................##..................................................................................",
    "........#..#.....#.........................#.......#.............#..........................................#................#....",
    "...#......#.............#...............#.............................................................................##..........",
    "#.................................#.......#.........#.#.#...................................#...#.#...........#..........#........",
    "#.........#....#...#.........#.#.............................................................#....................................",
    "........................#.#.......#.................................................#.............................................",
    "...#...##...#..#...........................#.....#..........................#...............................#.......#.............",
    "................#..............................#..........##...................................................................#..",
    ".......................................................................#...#..#...#.....#....#..................##..........#.....",
    "#.....................#.........#........#.....................................................................#.....#.......#....",
    "...........#......................#.......#.................................................#........................#............",
    ".......#.........................................#.....#...#...........#................#....#......#...........#......#..........",
    "....#.............#...............................#...#....#..#..#...........................................#.............#......",
    "...#.........#..........................................#.....#...........^.#...#....#...........................#................",
    ".....#..#...............#...........................#.#..........#........................................................#.......",
    ".............#.......#.............................................................................................#...#..........",
    "..#...................#...............................#......#............#...........#.......#...................................",
    "...........#.......................#..........#...#.......................#..............#.............##.............#..#........",
    "..#............#.............#.......................................................#.....##....................................#",
    ".#.........#.....................................................................#.........#......................................",
    ".............#....................................................................#.....#.............#...#...........#..........#",
    "..........................#.....#...#......................#.................................#.....#.................#.......#....",
    "..........#.#.....................................................................................................................",
    "............#.......#....................#.......#.............................................#..................................",
    ".......................................#..#........#...................................................#..........................",
    "...................#........#....#........#..................#..........................................................#.........",
    "........#..............#....................#............#......#...........#.....#..............................#.........#......",
    ".......#.....#.................#.#..#..............................................................#.......#..#...........#......#",
    ".#....................##.....................................................#...#.....#..........................................",
    "...........#..................#.....#....#............#...............#....#............#.......................#.................",
    "........#.....................................#......##............#..........................#..........#....................#...",
    "..........................#...............................................................#.......................................",
    "......................#..................................#.....................#.............................................#...#",
    ".........#..............................................................#........##.........#.......#.............................",
    "....#...#........#...........#....#.............#............#.....#..............................................................",
    "...........#...............................................................................................#.......#..#...........",
    "........#..........................#............................#...........#............#.............................#..........",
    ".......#...........................#...#...............#..#..#...................#.........#......................................",
    "..#..............................#........#...........#.......................................#...#...............................",
    ".............#...#.............#.........#...........#.....................................#................#.....................",
    ".........................#..........................#.................................#...........................................",
    "..................##.............#........#......#............#........................#.......#......................#....#......",
    ".....#............................................................................................................................",
    ".#..................................#.....#.............#...#.............................................#..............#..##..#.",
    "...............#........................................................#.........#..#..........#.........................#.......",
    ".............................................#...................#.................#..................#......................#....",
    "............................#.......................................................................................#.............",
    "............#...............#....................#....#..........#..#..............................#......#.......#.......##......",
    "............#.................................................................................#...................................",
    "........................#...............................................................#......#.......#.......#.......###......#.",
    "......................................#.#.........................................#.....#.............................#.........#.",
};

std::pair<int, int> find_initial_position(const Map& map)
{
    MapRow::const_iterator col_it;
    const auto row_it = std::find_if(map.begin(), map.end(),
        [&](const MapRow& row) -> bool
        {
            col_it = std::find_if(row.begin(), row.end(),
                [](char c) -> bool
                {
                    return c == '^' || c == '>' || c == '<' || c == 'v';
                });
            return col_it != row.end();
        });
    
    int row = std::distance(map.begin(), row_it);
    int col = std::distance(row_it->cbegin(), col_it);

    return std::make_pair(row, col);
}

struct Direction {
    char code;
    int drow;
    int dcol;
    int bit;
};

std::array<Direction, 4> directions{{
    {'^', -1,  0, 1 << 0},
    {'>',  0,  1, 1 << 1},
    {'v',  1,  0, 1 << 2},
    {'<',  0, -1, 1 << 3},
}};

void make_map(const RawMap& raw_map, Map& map)
{
    map.reserve(raw_map.size());
    for (const auto& raw_row: raw_map)
    {
        map.emplace_back();
        auto& row = map.back();
        row.reserve(raw_row.size());
        for (char c: raw_row) row.push_back(c == '.' ? 0 : c);
    }
}

int find_initial_direction(char c)
{
    int ret = 0;
    for (auto& dir: directions)
    {
        if (dir.code == c) break;
        ret++;
    }
    return ret;
}

int mark_path(Map& map, int row, int col)
{
    int ret = 0;

    auto dir_ind = find_initial_direction(map[row][col]);
    auto* dir = &directions[dir_ind];

    map[row][col] = 0;

    int nrows = map.size();
    for(;;)
    {
        int ncols = map[row].size();

        char& c = map[row][col];
        if (c != 'x') ret++;
        c = 'x';

        int new_row = row + dir->drow;
        if (new_row < 0 || new_row >= nrows) break;
        int new_col = col + dir->dcol;
        if (new_col < 0 || new_col >= ncols) break;

        if (map[new_row][new_col] == '#') // turn right?
        {
            dir_ind++;
            if (dir_ind > 3) dir_ind = 0;
            dir = &directions[dir_ind];
        }
        else
        {
            row = new_row;
            col = new_col;
        }
    }

    return ret;
}

int part1(const RawMap& raw_map)
{
    Map map;
    make_map(raw_map, map);
    auto [row, col] = find_initial_position(map);
    return mark_path(map, row, col);
}

bool is_closed_course(Map& map, int row, int col)
{
    auto dir_ind = find_initial_direction(map[row][col]);
    auto* dir = &directions[dir_ind];

    map[row][col] = 0;

    int nrows = map.size();
    for(;;)
    {
        int ncols = map[row].size();

        char& c = map[row][col];
        if (c & dir->bit) return true;

        int new_row = row + dir->drow;
        if (new_row < 0 || new_row >= nrows) break;
        int new_col = col + dir->dcol;
        if (new_col < 0 || new_col >= ncols) break;

        if (map[new_row][new_col] == '#') // turn right?
        {
            dir_ind++;
            if (dir_ind > 3) dir_ind = 0;
            dir = &directions[dir_ind];
        }
        else
        {
            c = c | dir->bit;
            row = new_row;
            col = new_col;
        }
    }

    return false;
}

int part2(const RawMap& raw_map)
{
    Map map;
    make_map(raw_map, map);

    int ret = 0;

    auto [init_row, init_col] = find_initial_position(map);
    const char init_c = map[init_row][init_col];

    Map path_map;
    path_map.reserve(map.size());
    for (const auto& map_row: map)
    {
        path_map.emplace_back();
        auto& path_row = path_map.back();
        path_row.reserve(map_row.size());
        for (char c: map_row) path_row.push_back(c);
    }

    mark_path(path_map, init_row, init_col);

    int row = -1;
    for(const auto& path_row: path_map)
    {
        row++;
        int col = -1;
        for (char c: path_row)
        {
            col++;
            if (c != 'x' || (row == init_row && col == init_col)) continue;

            map[row][col] = '#';

            if (is_closed_course(map, init_row, init_col)) ret++;

            map[row][col] = 0;

            for (auto& map_row: map)
            {
                for (char& c: map_row) if (c != '#') c = 0;
            }

            map[init_row][init_col] = init_c;
        }
    }

    return ret;
}

int main()
{
    std::cout << part1(raw_sample_map) << std::endl;
    std::cout << part1(raw_map) << std::endl;
    std::cout << part2(raw_sample_map) << std::endl;
    std::cout << part2(raw_map) << std::endl;
    return 0;
}
