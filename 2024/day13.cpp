
#include <cstdint>
#include <iostream>
#include <tuple>
#include <utility>
#include <vector>

using Loc = std::pair<int64_t, int64_t>;
using Machine = std::tuple<Loc, Loc, Loc>;
using Machines = std::vector<Machine>;

static constexpr int a_tokens = 3;
static constexpr int b_tokens = 1;

Machines sample_machines{
    {{94, 34}, {22, 67}, {8400, 5400}},
    {{26, 66}, {67, 21}, {12748, 12176}},
    {{17, 86}, {84, 37}, {7870, 6450}},
    {{69, 23}, {27, 71}, {18641, 10279}},
};

Machines machines{
    {{40, 38}, {21, 84}, {4245, 5634}},
    {{19, 11}, {37, 98}, {3246, 6474}},
    {{12, 38}, {44, 28}, {812, 12604}},
    {{29, 13}, {39, 72}, {2243, 14090}},
    {{96, 46}, {42, 79}, {12408, 11362}},
    {{65, 27}, {12, 51}, {8809, 6422}},
    {{11, 91}, {66, 82}, {5830, 9254}},
    {{57, 13}, {16, 67}, {5153, 5103}},
    {{11, 70}, {83, 20}, {14755, 16410}},
    {{51, 84}, {66, 23}, {5607, 2550}},
    {{14, 59}, {78, 20}, {14912, 3331}},
    {{56, 21}, {25, 58}, {4872, 6778}},
    {{75, 40}, {22, 40}, {7732, 5000}},
    {{15, 41}, {82, 51}, {5669, 14331}},
    {{98, 34}, {75, 89}, {10561, 9899}},
    {{12, 49}, {43, 13}, {14958, 12094}},
    {{18, 52}, {48, 21}, {12410, 2602}},
    {{77, 17}, {16, 60}, {7055, 2247}},
    {{13, 40}, {43, 24}, {4112, 9984}},
    {{37, 75}, {68, 37}, {8408, 7867}},
    {{13, 42}, {70, 38}, {7381, 302}},
    {{28, 56}, {53, 11}, {8944, 14348}},
    {{91, 43}, {12, 47}, {9012, 5209}},
    {{13, 78}, {70, 46}, {5613, 8620}},
    {{17, 42}, {89, 55}, {4722, 3422}},
    {{85, 48}, {28, 73}, {8605, 6289}},
    {{13, 38}, {53, 36}, {12197, 19510}},
    {{99, 58}, {11, 89}, {3630, 3365}},
    {{49, 19}, {13, 52}, {16162, 11677}},
    {{23, 47}, {53, 22}, {15642, 1633}},
    {{28, 70}, {68, 21}, {6924, 3304}},
    {{14, 47}, {87, 23}, {3695, 2449}},
    {{11, 27}, {69, 43}, {17286, 19692}},
    {{27, 73}, {84, 30}, {4794, 6654}},
    {{42, 82}, {92, 39}, {9358, 6599}},
    {{21, 96}, {45, 38}, {3318, 3428}},
    {{19, 37}, {71, 42}, {5997, 5325}},
    {{61, 18}, {30, 70}, {8745, 8360}},
    {{55, 87}, {94, 44}, {3924, 4532}},
    {{24, 99}, {33, 19}, {2670, 3752}},
    {{62, 37}, {11, 30}, {8816, 16214}},
    {{15, 34}, {49, 12}, {3691, 2026}},
    {{12, 41}, {57, 36}, {5282, 11476}},
    {{72, 28}, {16, 45}, {14752, 5614}},
    {{19, 41}, {51, 30}, {16527, 10945}},
    {{20, 45}, {94, 13}, {8348, 4491}},
    {{69, 28}, {36, 86}, {7974, 10018}},
    {{13, 53}, {65, 20}, {9610, 7395}},
    {{65, 16}, {31, 51}, {7167, 3152}},
    {{65, 36}, {11, 31}, {1895, 2544}},
    {{56, 30}, {27, 52}, {15207, 17592}},
    {{83, 25}, {23, 60}, {2631, 2650}},
    {{66, 37}, {31, 65}, {6096, 5989}},
    {{42, 15}, {23, 57}, {11824, 15227}},
    {{67, 56}, {17, 64}, {6571, 9824}},
    {{14, 44}, {51, 17}, {9714, 2462}},
    {{36, 89}, {66, 42}, {3342, 6687}},
    {{99, 67}, {45, 97}, {11259, 12411}},
    {{14, 49}, {67, 34}, {6905, 15896}},
    {{48, 11}, {40, 88}, {3104, 2288}},
    {{38, 12}, {26, 59}, {19188, 1197}},
    {{81, 78}, {59, 11}, {8027, 7409}},
    {{32, 86}, {80, 53}, {8656, 11113}},
    {{71, 33}, {28, 85}, {2196, 4476}},
    {{48, 87}, {68, 13}, {4844, 4039}},
    {{15, 72}, {67, 14}, {1220, 17648}},
    {{25, 67}, {61, 15}, {17544, 1752}},
    {{82, 15}, {54, 81}, {10520, 5196}},
    {{78, 31}, {14, 61}, {8064, 5150}},
    {{42, 90}, {52, 23}, {6212, 8890}},
    {{95, 75}, {12, 91}, {9924, 13297}},
    {{12, 51}, {83, 45}, {15950, 18296}},
    {{46, 16}, {27, 60}, {6025, 13612}},
    {{32, 45}, {32, 14}, {1888, 1477}},
    {{42, 54}, {69, 21}, {3942, 3714}},
    {{72, 39}, {15, 45}, {1362, 1254}},
    {{28, 88}, {57, 29}, {4401, 8877}},
    {{69, 11}, {35, 87}, {3006, 1212}},
    {{57, 79}, {91, 32}, {5923, 5856}},
    {{26, 60}, {66, 33}, {5128, 2216}},
    {{14, 79}, {72, 26}, {5660, 4558}},
    {{83, 40}, {33, 67}, {4671, 4857}},
    {{50, 16}, {20, 70}, {8900, 18512}},
    {{23, 11}, {42, 68}, {17224, 8282}},
    {{18, 93}, {57, 33}, {882, 2988}},
    {{11, 60}, {47, 21}, {6017, 10736}},
    {{27, 76}, {51, 12}, {5903, 6940}},
    {{24, 54}, {35, 16}, {1232, 10490}},
    {{91, 13}, {53, 65}, {7614, 6084}},
    {{96, 52}, {49, 92}, {1846, 2440}},
    {{12, 95}, {30, 12}, {1266, 6189}},
    {{22, 78}, {75, 44}, {6451, 7560}},
    {{11, 37}, {94, 41}, {6319, 3368}},
    {{24, 41}, {49, 24}, {2649, 9232}},
    {{13, 56}, {47, 12}, {19749, 9960}},
    {{55, 18}, {23, 74}, {10144, 3912}},
    {{43, 18}, {21, 35}, {954, 13100}},
    {{66, 83}, {78, 18}, {6546, 5509}},
    {{78, 23}, {12, 56}, {14924, 228}},
    {{20, 51}, {43, 19}, {19653, 2384}},
    {{68, 17}, {37, 73}, {6386, 5804}},
    {{63, 27}, {12, 38}, {7361, 15599}},
    {{22, 87}, {81, 13}, {6224, 6174}},
    {{70, 96}, {67, 21}, {9930, 10074}},
    {{57, 23}, {34, 66}, {1295, 9225}},
    {{25, 69}, {41, 27}, {3508, 4254}},
    {{26, 65}, {47, 21}, {9769, 5583}},
    {{35, 13}, {32, 91}, {3350, 5200}},
    {{27, 73}, {60, 35}, {4098, 6627}},
    {{23, 18}, {11, 52}, {1748, 2366}},
    {{54, 17}, {11, 61}, {7660, 11300}},
    {{18, 48}, {67, 16}, {9992, 2480}},
    {{48, 25}, {26, 61}, {3910, 16886}},
    {{22, 56}, {59, 15}, {3618, 15824}},
    {{98, 21}, {31, 48}, {6283, 1884}},
    {{17, 82}, {60, 23}, {1830, 7495}},
    {{15, 58}, {78, 37}, {5052, 5246}},
    {{51, 17}, {13, 92}, {4808, 2041}},
    {{57, 14}, {29, 91}, {3287, 7182}},
    {{31, 12}, {11, 49}, {11362, 7581}},
    {{63, 31}, {29, 96}, {7469, 7680}},
    {{28, 31}, {98, 14}, {9254, 1835}},
    {{57, 36}, {24, 70}, {3168, 2988}},
    {{68, 31}, {12, 47}, {13156, 8891}},
    {{26, 90}, {92, 31}, {7198, 7381}},
    {{55, 46}, {99, 16}, {10197, 2650}},
    {{69, 48}, {11, 94}, {7023, 13434}},
    {{44, 12}, {13, 63}, {18919, 17621}},
    {{13, 58}, {77, 24}, {16515, 15288}},
    {{54, 34}, {16, 47}, {15934, 3012}},
    {{18, 98}, {54, 17}, {5994, 10474}},
    {{93, 30}, {41, 73}, {6577, 4931}},
    {{70, 92}, {79, 24}, {4874, 3532}},
    {{37, 67}, {60, 28}, {9164, 9940}},
    {{22, 72}, {83, 69}, {6711, 10413}},
    {{13, 32}, {29, 22}, {10081, 10110}},
    {{90, 77}, {18, 61}, {3438, 3899}},
    {{21, 88}, {81, 79}, {8469, 14134}},
    {{55, 16}, {24, 64}, {2225, 14448}},
    {{14, 37}, {58, 16}, {15634, 19569}},
    {{47, 29}, {20, 49}, {5167, 8809}},
    {{47, 79}, {94, 17}, {4747, 3608}},
    {{16, 12}, {34, 90}, {1782, 3078}},
    {{87, 42}, {53, 90}, {8122, 5016}},
    {{28, 58}, {64, 28}, {7352, 6968}},
    {{75, 45}, {12, 46}, {18749, 16947}},
    {{19, 41}, {61, 26}, {10002, 16534}},
    {{27, 83}, {96, 67}, {6831, 8681}},
    {{18, 86}, {59, 45}, {5008, 9240}},
    {{84, 97}, {39, 13}, {1773, 798}},
    {{12, 63}, {60, 18}, {4188, 3276}},
    {{23, 43}, {58, 32}, {13694, 7172}},
    {{41, 67}, {96, 33}, {11262, 7998}},
    {{24, 51}, {60, 16}, {18644, 5895}},
    {{42, 44}, {16, 67}, {3896, 7347}},
    {{54, 77}, {66, 15}, {8286, 5961}},
    {{14, 47}, {75, 42}, {13109, 2219}},
    {{24, 73}, {96, 64}, {4608, 8088}},
    {{17, 94}, {67, 56}, {5147, 11164}},
    {{64, 95}, {76, 32}, {8300, 5128}},
    {{25, 73}, {54, 15}, {10088, 2777}},
    {{57, 16}, {28, 62}, {15188, 13990}},
    {{62, 57}, {15, 68}, {4717, 8836}},
    {{60, 13}, {11, 40}, {14252, 6806}},
    {{97, 34}, {16, 63}, {8401, 4896}},
    {{84, 29}, {17, 99}, {8450, 10554}},
    {{97, 78}, {18, 60}, {8061, 9942}},
    {{66, 25}, {27, 67}, {8834, 17803}},
    {{96, 44}, {29, 61}, {1832, 2748}},
    {{67, 41}, {17, 32}, {10972, 16424}},
    {{14, 30}, {57, 16}, {4844, 19410}},
    {{84, 18}, {59, 66}, {11204, 6456}},
    {{48, 11}, {16, 62}, {8992, 8894}},
    {{40, 21}, {24, 44}, {3512, 4136}},
    {{37, 35}, {54, 12}, {4708, 1796}},
    {{92, 12}, {47, 95}, {7584, 4544}},
    {{96, 16}, {42, 93}, {6318, 1999}},
    {{25, 58}, {59, 27}, {10433, 7150}},
    {{34, 51}, {84, 40}, {10224, 7166}},
    {{13, 76}, {59, 12}, {18974, 8992}},
    {{32, 31}, {14, 83}, {2548, 7329}},
    {{34, 94}, {52, 13}, {6358, 6463}},
    {{24, 33}, {47, 19}, {5073, 3006}},
    {{19, 63}, {49, 15}, {16481, 5627}},
    {{17, 49}, {83, 23}, {6429, 5989}},
    {{75, 54}, {12, 28}, {3383, 10382}},
    {{47, 44}, {81, 16}, {7640, 1648}},
    {{38, 14}, {29, 50}, {11822, 16106}},
    {{77, 34}, {23, 70}, {3054, 3084}},
    {{83, 24}, {18, 63}, {8358, 6867}},
    {{71, 40}, {23, 78}, {7136, 5126}},
    {{31, 81}, {81, 50}, {8228, 8729}},
    {{98, 14}, {43, 39}, {2960, 2460}},
    {{95, 62}, {11, 41}, {4992, 4002}},
    {{79, 18}, {32, 75}, {3972, 4629}},
    {{31, 76}, {94, 12}, {8634, 4128}},
    {{58, 17}, {24, 73}, {8768, 10860}},
    {{60, 16}, {61, 96}, {6182, 6592}},
    {{63, 18}, {33, 75}, {16073, 14714}},
    {{37, 15}, {49, 75}, {2391, 11285}},
    {{69, 49}, {14, 56}, {6196, 7532}},
    {{20, 61}, {61, 20}, {12379, 5286}},
    {{39, 71}, {25, 11}, {1962, 1294}},
    {{75, 34}, {14, 40}, {17099, 15930}},
    {{88, 16}, {25, 58}, {4555, 3982}},
    {{64, 73}, {12, 72}, {1352, 2825}},
    {{20, 74}, {48, 15}, {4112, 3182}},
    {{22, 37}, {27, 15}, {18362, 4145}},
    {{20, 46}, {52, 24}, {8104, 15420}},
    {{23, 54}, {32, 16}, {13407, 10166}},
    {{79, 77}, {80, 11}, {15261, 8646}},
    {{54, 27}, {31, 56}, {16561, 19116}},
    {{22, 43}, {76, 40}, {5000, 4454}},
    {{69, 98}, {89, 36}, {5019, 6586}},
    {{58, 40}, {14, 35}, {19282, 6535}},
    {{60, 65}, {61, 17}, {6744, 3183}},
    {{32, 71}, {43, 15}, {19388, 6017}},
    {{25, 68}, {90, 45}, {6460, 5783}},
    {{48, 17}, {63, 84}, {4113, 4356}},
    {{30, 99}, {93, 33}, {4743, 9900}},
    {{62, 19}, {13, 82}, {2907, 1593}},
    {{21, 42}, {56, 36}, {11127, 3362}},
    {{24, 11}, {13, 44}, {6870, 5006}},
    {{94, 62}, {11, 22}, {9446, 7174}},
    {{16, 64}, {82, 35}, {3918, 229}},
    {{52, 78}, {37, 16}, {7082, 13428}},
    {{15, 68}, {45, 16}, {3695, 5912}},
    {{21, 84}, {51, 29}, {4935, 9940}},
    {{75, 28}, {11, 44}, {13726, 10856}},
    {{22, 58}, {66, 17}, {7316, 1998}},
    {{88, 23}, {38, 61}, {9878, 6514}},
    {{40, 70}, {49, 19}, {2710, 13540}},
    {{27, 51}, {84, 27}, {10278, 6774}},
    {{15, 58}, {46, 18}, {13233, 696}},
    {{73, 30}, {12, 60}, {2464, 2940}},
    {{73, 36}, {18, 45}, {6728, 4221}},
    {{20, 38}, {51, 20}, {4509, 2492}},
    {{12, 57}, {56, 19}, {1180, 4370}},
    {{18, 74}, {91, 39}, {2713, 6797}},
    {{13, 27}, {54, 12}, {924, 1218}},
    {{13, 79}, {63, 50}, {5645, 6678}},
    {{61, 28}, {13, 53}, {18905, 11326}},
    {{23, 38}, {94, 39}, {4360, 2435}},
    {{86, 20}, {38, 59}, {6476, 6422}},
    {{12, 54}, {50, 18}, {16766, 5660}},
    {{15, 95}, {68, 60}, {3883, 9395}},
    {{13, 30}, {74, 43}, {17495, 19762}},
    {{19, 46}, {69, 26}, {723, 8622}},
    {{54, 18}, {14, 33}, {366, 13862}},
    {{71, 36}, {18, 46}, {4690, 2968}},
    {{97, 68}, {19, 68}, {5065, 8636}},
    {{39, 76}, {47, 13}, {7571, 3589}},
    {{51, 19}, {23, 70}, {6566, 12027}},
    {{39, 59}, {75, 22}, {4818, 1984}},
    {{97, 14}, {71, 77}, {15444, 7903}},
    {{40, 28}, {35, 82}, {4050, 6860}},
    {{23, 23}, {76, 16}, {2842, 1942}},
    {{64, 36}, {25, 49}, {3864, 5248}},
    {{34, 63}, {20, 11}, {10418, 15778}},
    {{73, 24}, {49, 86}, {5359, 8052}},
    {{34, 82}, {51, 13}, {11073, 1219}},
    {{34, 96}, {97, 76}, {7805, 7988}},
    {{69, 40}, {26, 52}, {12331, 3644}},
    {{94, 29}, {35, 58}, {8190, 4698}},
    {{32, 79}, {77, 18}, {6541, 4962}},
    {{12, 83}, {87, 11}, {7976, 18341}},
    {{91, 33}, {48, 78}, {12379, 8973}},
    {{99, 42}, {26, 92}, {3348, 5064}},
    {{15, 60}, {62, 20}, {3655, 10840}},
    {{29, 61}, {58, 28}, {12676, 19276}},
    {{16, 82}, {79, 28}, {1021, 4102}},
    {{36, 14}, {21, 50}, {1514, 6638}},
    {{42, 59}, {97, 26}, {8779, 6268}},
    {{67, 13}, {87, 95}, {6726, 7164}},
    {{51, 42}, {23, 72}, {4048, 7260}},
    {{31, 72}, {18, 12}, {3629, 7296}},
    {{40, 59}, {80, 21}, {1760, 947}},
    {{11, 38}, {50, 14}, {1815, 18132}},
    {{98, 70}, {24, 59}, {6266, 4978}},
    {{53, 15}, {77, 95}, {905, 915}},
    {{93, 51}, {17, 80}, {3846, 8046}},
    {{12, 62}, {96, 82}, {6420, 5846}},
    {{23, 99}, {45, 48}, {2096, 2757}},
    {{77, 15}, {15, 61}, {14426, 16046}},
    {{34, 14}, {23, 31}, {17470, 6594}},
    {{84, 24}, {46, 96}, {7464, 7104}},
    {{32, 68}, {63, 24}, {13372, 7132}},
    {{42, 13}, {47, 73}, {11393, 3677}},
    {{39, 16}, {43, 74}, {12111, 9106}},
    {{64, 80}, {47, 16}, {3879, 1728}},
    {{44, 40}, {90, 18}, {9688, 2936}},
    {{96, 36}, {36, 64}, {3456, 5740}},
    {{12, 81}, {60, 31}, {4836, 6463}},
    {{28, 46}, {79, 34}, {5949, 4122}},
    {{29, 84}, {73, 51}, {8238, 9261}},
    {{61, 15}, {14, 62}, {12073, 12411}},
    {{29, 13}, {14, 32}, {8805, 1677}},
    {{37, 72}, {40, 16}, {17919, 14712}},
    {{14, 43}, {56, 21}, {8026, 6925}},
    {{53, 15}, {30, 64}, {2437, 2355}},
    {{40, 65}, {44, 15}, {2048, 5280}},
    {{30, 17}, {16, 34}, {11858, 1961}},
    {{54, 17}, {67, 76}, {6016, 2443}},
    {{12, 58}, {51, 12}, {2246, 13106}},
    {{13, 30}, {62, 14}, {16172, 9898}},
    {{97, 83}, {29, 93}, {3909, 10027}},
    {{11, 70}, {77, 26}, {1881, 4082}},
    {{72, 17}, {72, 86}, {2664, 2699}},
    {{13, 40}, {99, 62}, {3789, 4380}},
    {{76, 77}, {15, 68}, {4074, 8035}},
    {{85, 51}, {12, 33}, {8771, 6759}},
    {{48, 99}, {94, 50}, {5722, 5615}},
    {{25, 73}, {56, 22}, {6614, 6010}},
    {{46, 34}, {13, 91}, {4217, 4175}},
    {{60, 58}, {13, 53}, {6137, 9531}},
    {{27, 59}, {46, 18}, {4171, 2843}},
    {{98, 90}, {20, 90}, {5418, 6480}},
    {{34, 64}, {45, 12}, {2503, 11980}},
    {{32, 11}, {14, 33}, {9516, 14510}},
    {{11, 59}, {55, 14}, {1189, 1697}},
};

int64_t eval_machine(const Machine& machine, int64_t offset=0)
{
    const auto& button_a = std::get<0>(machine);
    const auto& button_b = std::get<1>(machine);
    auto prize = std::get<2>(machine);
    prize.first += offset;
    prize.second += offset;

    int64_t det = button_a.first * button_b.second - button_a.second * button_b.first;
    if (det == 0)
    {
        if (button_a.first * prize.second - button_a.second * prize.first != 0)
            return 0; // impossible to hit the prize

        // infinite potential solutions
        // minimize cost=ca*a+cb*b s.t. ax*a+bx*b=px

        if (button_b.first == 0)
        {
            if (prize.first % button_a.first != 0) return 0; // no integer solution
            return prize.first / button_a.first * a_tokens;
        }

        // b = px/bx-ax/bx*a => cost=(ca-cb*ax/bx)*a+cb*px/bx=(A/bx)*a+B/bx
        int64_t A = a_tokens * button_b.first - b_tokens * button_a.first;
        int64_t B = b_tokens * prize.first;
        if (A == 0)
        {
            return B % button_b.first == 0 ? B / button_b.first : 0;
        }

        // int64_t min_cost = std::numeric_limits<int64_t>::max();
        // for (int64_t a=0; a <= 100; a++)
        // {
        //     if ((prize.first - button_a.first * a) % button_b.first != 0) continue;
        //     int64_t b = (prize.first - button_a.first * a) / button_b.first;
        //     int64_t cost = a * a_tokens + b* b_tokens;
        //     if (cost < min_cost) min_cost = cost;
        // }

        // return std::min(min_cost, std::numeric_limits<int64_t>::max());

        std::cout << "Are you serious?" << std::endl;
        return 0;
    }
    else
    {
        // unique solution
        int64_t num_a = button_b.second * prize.first - button_b.first * prize.second;
        if (num_a % det != 0) return 0; // no integer solution
        int64_t num_b = button_a.first * prize.second - button_a.second * prize.first;
        if (num_b % det != 0) return 0; // no integer solution
        return num_a / det * a_tokens + num_b / det * b_tokens;
    }
}

int64_t solve(const Machines& machines, int64_t offset=0)
{
    int64_t ret = 0;
    for (const auto& machine: machines)
        ret += eval_machine(machine, offset);
    return ret;
}

int main()
{
    std::cout << solve(sample_machines) << std::endl;
    std::cout << solve(machines) << std::endl;
    std::cout << solve(sample_machines, 10000000000000) << std::endl;
    std::cout << solve(machines, 10000000000000) << std::endl;
    return 0;
}
