
#include <cstdint>
#include <endian.h>
#include <iostream>
#include <limits>
#include <string>
#include <utility>
#include <vector>
#include <array>
#include <unordered_set>

using Map = std::vector<std::string>;
using Spots = std::unordered_set<int>;

std::array<std::pair<int, int>, 4> dxdy{{
    {1, 0},
    {0, 1},
    {-1, 0},
    {0, -1},
}};

Map sample_map0{
    "#####",
    "#...#",
    "#S#E#",
    "#...#",
    "#####",
};

Map sample_map1{
     "###############",
     "#.......#....E#",
     "#.#.###.#.###.#",
     "#.....#.#...#.#",
     "#.###.#####.#.#",
     "#.#.#.......#.#",
     "#.#.#####.###.#",
     "#...........#.#",
     "###.#.#####.#.#",
     "#...#.....#.#.#",
    "#.#.#.###.#.#.#",
    "#.....#...#.#.#",
    "#.###.#.#.#.#.#",
    "#S..#.....#...#",
    "###############",
};

using MapScores = std::vector<std::vector<std::pair<uint64_t, int>>>; // score, max_steps
using AllScores = std::vector<MapScores>;

Map map{
    "#############################################################################################################################################",
    "#.....#...#.....#...#.........#...#.....#...........#.........#...................#.#.........#.......#.........#.......#.......#.........#E#",
    "#.#.#.#.###.#.#.#.#.#.###.###.###.#.#.#.###.#######.#.#.#####.#.#########.#####.#.#.#.#.###.#.#####.#.###.#####.#.#####.#.###.#.#.#######.#.#",
    "#.#.#.............#...#...#.#...#.#.#.....................#...#.#.......#.#.....#.#.....#...#.......#...#.....#...#...#...#.#...#.....#.#.#.#",
    "#.#.#.#####.#.#.#.#####.###.###.#.#.#.#.#.###.#.#.#.#####.###.###.#####.###.#####.#####.#.#############.#.###.#.###.#.#####.#.###.###.#.#.#.#",
    "#.#.#.....#.#.#.#.#.#...#.....#.#...#.#.#.#.#...#...#...#...#...#.....#.....#...#.....#.#...#...#.....#.#...#.#.....#.........#.#...#.#.#.#.#",
    "###.#####.#.#.###.#.#.###.###.#.#.###.#.#.#.#.#######.#.###.###.#.###.#########.#####.#.###.#.###.###.#.#.###.#.###############.###.#.#.#.#.#",
    "#...#.....#.#.......#.#...#...#.#...#.#...#.#...#.....#...#.#.#.#.....#.................................#...#.#.....#.........#.....#.#.#.#.#",
    "#.###.#####.#.###.###.#####.###.###.#.#####.###.#####.###.#.#.#.#.#####.#.#.#######.###.#.#.#.#####.#####.#.#.#.###.#####.###.#######.#.#.#.#",
    "#.#.......#.#...#.#...#...#.....#...#...#.............#.#...#...#.#...#.#.#.#.....#...........................#...........#.#.....#...#.....#",
    "#.#######.###.#.###.###.#.###.###.#####.###############.#####.###.#.#.#.#.###.###.###.#####.###########.#.#################.#####.#.#.#######",
    "#...#.........#.....#...#...#.#.....#.#.........#...........#...#...#.#.#...#.#...#.....#.#.#.....#.....#.............................#.....#",
    "###.#.###############.#####.#.#####.#.#########.###########.###.#####.#.###.#.#.#######.#.#.###.#.#.###.#.#####.#.#####.###.#########.#.###.#",
    "#...#...#.#.....#.........#.#.....#.#.........#.#.............#...#...#.#.#.#.#.......#...#.....#.#...#.#.#...#...#...#...#...........#.#...#",
    "#.#####.#.#.###.#.###.#####.#####.#.#####.#.###.#.###############.#.###.#.#.#.#######.###.#.#####.#.#.#.#.#.#.#####.#.###.###########.#.#.#.#",
    "#.....#...#...#.#.#.#.......#...#.#.......#.#...#...............#...#...#.#.#.#.#...#...#...#.....#.#.#.#...#...#...#...#...#...........#...#",
    "#.###.###.###.#.#.#.#.#######.#.#.#######.###.###.###########.#########.#.#.#.#.#.#.###.###.#.#.###.#.#########.###.#.#####.#.#.#####.#####.#",
    "#.#.#.#...#...#...#.#.#.....#.#.#.#.#...#.#...#.#.....#.....#.#.......#.....#.#...#.#...#.....#...#.#.........#...#.#.....#...#...........#.#",
    "#.#.#.###.#.#######.#.#.###.#.#.#.#.#.#.#.#.###.#####.#####.#.#.#.###.#####.#.#####.#.###########.#####.#####.###.#.###.#######.#######.#.#.#",
    "#...#...#.#.#.......#.#...#...#.#.#.#.#...#.#.......#...#...#...#...#...#...#.#...#.#...........#.....#.#.......#.#...#.....#...............#",
    "###.###.#.#.#######.#.###.#####.#.#.#.#####.###.###.###.#.#.#.#####.###.#.###.#.#.#.###########.#####.#.#########.#.#####.#.#.#.#####.#####.#",
    "#...#...#.#.#.....#.#...#.#...#.#.#...#...#...#.#...#...#.......#...#.#...#...#...#...#...#...#.....#.#.....#.....#.#.....#.#...#...#.#...#.#",
    "#####.#####.#.###.#.###.#.#.#.#.#.###.###.###.#.#.###.#####.###.#.###.###.#.###.#.#.#.#.#.#.#.###.###.#.###.#.#######.#####.#.#.#.#.#.#.#.#.#",
    "#.....#.....#...#.#...#.#.#.#...#...#.......#.#.#.........#...#.#.#.....#.#.....#...#...#...#...#.....#...#.#...#...#.#...#...#...#...#.#.#.#",
    "#.#####.#######.#.#.###.#.#.#######.#######.#.#.#########.###.#.#.#.#.#.#.#################.###.###.###.###.###.#.#.#.#.###.#.#########.#.#.#",
    "#.....#.#.......#...#.....#.......#.....#...#.#...#.....#.....#.#.#.#...#.#...........#.....#.....#.....#...#.#...#.#.#.....#...........#...#",
    "#.###.#.#.#.###.###.#.###.###.#########.###.#.#####.###.#######.#.#.###.#.###.#.#####.#.#####.###.#######.#.#.#####.#.###.#.#.#.#.#.###.#####",
    "#.#.#...#.#...#...#.....#.#...#.......#...#.#.....#...#.....#...#.#...#.#...#.#.#.....#...#...#.#.....#...#...#.....#...#.#.....#.#...#.#...#",
    "#.#.#########.#.#.#####.#.#####.#.###.###.#.#.###.#.#######.#.###.###.#.###.#.#.###.#####.#.#.#.#####.#.#######.#####.#.#.#.#####.###.#.#.#.#",
    "#.............#.#.....#.#.....#.#.#.#.....#...#...#.#.........#.#.#...#.#...#.#.....#...#.#.#.#.......#.#.....#...#...#.#.#.....#.#...#.#.#.#",
    "#.###########.#.#####.#.#.###.#.#.#.###.#.#####.###.#.#######.#.#.#.###.#.#######.#.#.###.#.#.#.#######.#.###.#.#.#####.#.###.#.#.#.#.###.#.#",
    "#.#...#...#...#.#.#.....#...#...#.#.....#...........#.....#.#.#.#.#.#...#.........#...#...#...#.....#.......#...#...#...#...#.#...#.#.#...#.#",
    "###.#.#.#.#.#.#.#.#.#############.###########.#.#########.#.#.#.#.#.#########.#######.#.###.###.###.#########.#####.#.#####.#.###.#.###.###.#",
    "#...#.#.#...#.#.#...#...........#.............#.......#...#.#.#.#.#.......#...#.....#.#.#.#...#.#...#.......#.#.....#...#...#.#...#.......#.#",
    "#.###.#.#####.#.#####.#########.###.###.#####.#######.#.###.#.#.#.#.###.#.#.###.###.###.#.#.#.#.#.###.#####.#.#.#######.#.###.#.#########.#.#",
    "#.#.....#...#.#.#...........#.#...#...#.....#.#.......#.#.....#.#.#.....#.......#.#...#.#.#.#.#.....#...#...#.#...#.....#...#.#.....#...#.#.#",
    "#.#######.#.#.#.#.#########.#.###.###.#####.#.#.#######.#####.#.#.#.#.#######.###.###.#.#.#.#.#####.###.#.###.###.#.#######.#.#####.#.#.###.#",
    "#.........#.#.#.#...#.#...#.....#.#.#...#...#.#.......#.....#...#...#.#.....#.#.....#...#...#...#...#...#.#.....#...#.....#.#...#.....#.....#",
    "#.#########.#.#.###.#.#.#.#.#####.#.#.###.###.#.#######.###.#######.###.###.#.#####.#####.###.#.###.#.###.#.###.#####.###.#.###.#.#.###.#####",
    "#...#...#...#.....#...#.#...#.....#...#...#...#.#.....#.#...#.....#.......#...#.....#...#.#.......#...#...#...#.#...#.#.#...#...#.#...#.#...#",
    "###.#.###.###.#.#####.#.###.#.#####.###.###.#####.#.#.#.#.#.#.###.#######.#####.#####.#.#.#.#.###.#####.#####.#.#.#.#.#.#####.###.#.#.###.#.#",
    "#.#...#...#.....#.....#.#.#.#.....#.#.#...........#.....#.#.#...#...#...#.....#.........#.#.#.....#...#.......#...#.#.......#.#...#.#.#...#.#",
    "#.###.#.#.###.#.#.#####.#.#.#####.#.#.#################.#.#####.###.#.#.#####.#######.#.#.#.#######.#.###########.#########.#.#.###.#.#.###.#",
    "#...#.#.#.#...#.#.#...#.#.#...#...#.....#...........#.....#.....#.#.#.#...#.........#.#...#.....#...#.......#.....#.......#...#.....#.....#.#",
    "#.###.#.#.#.#.###.#.#.#.#.###.#.#######.#.#####.###.#.#####.#####.#.#.###.#########.#.#.#####.#.#.#######.#.#######.#.#####.#######.###.###.#",
    "#.#...#.#.#.#.....#.#...#...#.#...#...#...........#.#...#...#.....#...#.#...#.....#...#.#.#.....#.#.......#.........#.......#.....#.........#",
    "#.#.###.###.#.#####.#.#####.#.###.#.#.#.#########.#.#.#.#.#######.#.#.#.###.#####.###.#.#.#.#####.###.###.#############.#####.###.#.###.###.#",
    "#.#...#.#...#.......#.....#.......#.#.....#...#.#.#...#...#.....#.#.#.#...#...#...#...#...#.#...#...#.#.......#.......#.....#.#...#...#...#.#",
    "#.###.#.#.###.#####.#.###.#######.#.#####.#.#.#.#.#########.###.#.#.#.#.#.###.#.#.#.#######.#.#.###.###.#####.#.#####.#######.###.#.#.#.#.#.#",
    "#.....#.....#.#...#.#.#.#.#...#.........#...#.#.#.#.....#.....#...#.#...#...#.#.......#...#.#.#...#...#.....#.#...#.....#...#...#.....#.#...#",
    "#.###########.#.###.#.#.#.#.#.#####.###.#####.#.#.#.#####.###.#####.#######.#.#######.#.#.#.#.#.#####.#####.#.###.#####.#.#.###.###.###.###.#",
    "#...#.....#...#.....#.#.#...#.#.......#...#.....#.#.........#.....#.#...#...#.#...#...#.#.#...#.#...#.......#...#.....#.#.#...#.#.....#.#...#",
    "###.###.###.#######.#.#.#####.#.#######.#.#.#####.#.#.###########.#.#.#.#.###.#.#.#.###.#.#####.#.#.###########.#####.#.#.###.#.#.#.###.#.#.#",
    "#.#...#.#...#.....#.#...#...#.....#...#.#.#.#.....#.#.#.......#...#...#...#...#.#.#.....#.....#.#.#.........#...#...#.#...#...#.#.......#...#",
    "#.#.#.#.#.#.#.###.#####.#.#########.#.###.###.#####.#.#.#####.#.#.#########.###.#.###########.#.#.#########.#.###.#.#.#####.###.#.#.###.###.#",
    "#.....#.#.#.#.#...#.....#.......#...#.....#...#.......#.#.....#.#.......#.#.....#.#.#.........#...#.......#...#...#.#.#.....#...#.........#.#",
    "#.#####.#.#.#.#.###.#####.###.#.#.#######.#.#####.#####.###.###.#######.#.#######.#.#.#####.#####.#######.#####.#####.#.#######.#######.#.#.#",
    "#...#...#.........#.#.....#...#.#.#.....#.#.....#.#...#...#.....#.#.....#.#.....#.#...#.........#...#...#.......#.....#.#.......#.#.....#.#.#",
    "###.#.#.#.#.#.###.#.#.#####.#####.#.#.#.#.#####.#.###.###.#######.#.#####.#.###.#.#.#####.#####.###.#.#.#.#.#####.#####.#####.#.#.#.###.#.#.#",
    "#.....#.#.#.....#...........#.....#.#.#.#.#.....#.....#...#...#...#.#...#...#...#.#.......#.....#.#...#.#.#.#...#...#.........#.....#.#.#.#.#",
    "#######.#.#.#################.#####.#.###.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.###.#########.###.#.#####.#.###.#.#.#.###.#######.#####.#.#.#.#",
    "#.....#.#...#...............#...#.#.#.#...#...#.....#.#.......#.#.#...#.#.#.#.#...........#.....#.....#.#.#...#.#.#...#.......#.#.....#...#.#",
    "#.###.#####.#.#####.#####.#.###.#.#.#.#.#####.#.###.#.#######.#.#.#.#.#.#.#.#.###########.#.#.#####.#.#.#.#.###.#####.#.#####.#.#.###.#####.#",
    "#.#...#...#...#.......#...#...#.#.#.#...#...#.#.#...#...#...#.#.#.#...#...#.#...............#.....#.#.....#.#.#...#...#.#...#.#...#...#.....#",
    "#.#.###.#.#.#.#.#.#.#.#.#.###.#.#.#.#####.#.#.#.#.#####.###.#.#.#.#.#.#####.###.#.#########.###.#.#.#######.#.###.#.###.#.#.###.###.###.###.#",
    "#.#.#...#...#.#.#...#...#.#.#.#.#.#...#...#.#.#.#.#.........#.#...#.#.......#.#...#.......#.#...#.#.#.......#...#.#...#...#.........#.#.#...#",
    "#.#.###.###.###.#########.#.#.#.#.###.#.###.#.#.###.#####.###.#.###.#.#.#####.#####.#####.#.#.###.###.#######.#.#.###.#########.#.#.#.#.#.#.#",
    "#.#.....#.......#.........#...#.#...#.#.#...#.......#...#.#...#...#.#.#...........#.....#...#.#.#.....#.........#...#.#...#.....#.#.#...#...#",
    "#.#######.#######.#########.###.#.#.#.#.###.#.#######.#.###.###.#.#.#.#####.#.###.#####.#####.#.#######.###.#######.#.#.#.#.###.#.#.#######.#",
    "#.#.....#...#.#...#...#.....#.....#.#.#.#...#.#.....#.#.....#.#.#...#.#...#.#.........#.#.....#.....#...#.#.........#.#.#...#.....#.......#.#",
    "#.#.###.###.#.#.###.#.#.#########.#.#.#.#.#.#.#.#.#.#.#######.#.#####.#.#.###.#.#######.#.#####.###.#.###.#######.#.#.#.#######.#########.#.#",
    "#.....#...#...#.#...#.#.#.....#...#.#...#.#...#...#...#.......#...#...#.#...#.#...#.....#.#...#.#.#...#.....#.......#.#.......#.........#...#",
    "#.#####.#####.#.#.###.#.#.#.#.#.###.###.#.#####.#.#.###.#.###.###.#.#####.#.#.###.#.#####.###.#.#.#####.#.###.#.#####.#.#####.#.#####.#####.#",
    "#...#...#.....#...#...#.#.#.#.#...#.#...#.....#.#.#...#.#...#.#...#.........#...#.#.......#...#.#.....#.#.....#.......#...#.#.......#.#.....#",
    "#.###.#.#.#########.###.#.#.#.###.#.#.#######.#.#.#.#.#####.###.###############.#.#########.###.#.###.###.###########.###.#.###.###.#.#.#####",
    "#.#...#.#.#.#.....#...#...#.#.....#.#.#...#.#.#.#.#.#...#.......#.....#.......#.#.....#...#.....#...#...#...........#...#.#.......#.#.#.....#",
    "#.#.#####.#.#.#.#####.#####.#######.#.#.#.#.#.###.#.###.#.###.###.###.#######.#.#####.#.#.#.#####.#.###.#########.#####.#.#####.#.#.#.#.###.#",
    "#.#.......#...#.#.....#...#.........#.......#...#...#...#...#.#...#...#.......#.#...#.#.#.......#.#.......#.......#.....#.......#...........#",
    "#.#############.#.#####.#.###.#############.###.#####.###.#.#.#.###.###.#####.#.###.#.#.#####.#.#.###.###.#####.###.#######.###.#####.#.#.#.#",
    "#.#...........#.#.......#.................#...#.....#.....#.#.#.#.#.#...#.....#.#...#.#...#.#.#.........#.....#...#.#.....#.....#...#...#...#",
    "#.###.#######.#.###########.###.#######.#####.#####.###.#.#.#.#.#.#.#.#########.#.#.#.###.#.#.#####.###.#####.#####.#.###.#.#####.#.#.#.#####",
    "#.....#.....#...#.........#...#...#...#...........#.....#.#...#.#...#.............#.#.......#.#...#...#.#...#.......#...#...#...#.#.#.#.....#",
    "###########.###.#.#######.###.###.###.###########.#######.#####.#.#################.#.#.#.#.#.#.###.#.#.#.#############.#####.#.#.#.#.#.###.#",
    "#.............#.#.#...#.#.#.#.#.#...#.#.....#...........#.#.....#.#.............#...#.#...#.#.....#.#.#.#.#.....#.....#.#.#...#...#.#.#...#.#",
    "#.###.#######.#.#.#.#.#.#.#.#.#.###.#.#.###.#.#########.#.###.###.###.#.###.###.#.###.###.#.#.#.#.#.#.#.#.#.###.#.#.###.#.#.#######.#.#.#.#.#",
    "#.#...#...#.#.#.#...#.#.....#.#.......#...#.#...........#...#.#.#.#...#.#...#.#.#...#.#...#.#.#.....#.#...#...#.#.#.......#.#...#.#.......#.#",
    "#.#.#.#.#.#.#.#.#####.#####.#.#####.#.###.#.###.#######.###.#.#.#.#.###.#.#.#.#.#####.#.###.#.#.#####.#.#.###.#.#.#.#####.#.#.#.#.###.#.#.#.#",
    "#...#.#.#...........#.....#.#.......#.#.#.#.....#.....#...#...#...#.#...#.#.#.........#.#...#.#...#...#.#...........#...#.#...#...#.....#.#.#",
    "#.#.###.#.#########.#####.#.#######.#.#.#.#######.###.###.#####.###.#####.#.#######.#.#.###.#.#####.#.#.#####.#.#####.#.#########.#.#.#.###.#",
    "#.#.......#...#...#.#.....#...#...#.#.#.#.#.......#...#.....#...#.........#.#.....#...#.#...........#.#.#...#.#.......#.#.....#.............#",
    "#.#.#####.#.#.#.#.#.#.#####.#.#.###.#.#.#.###.#####.###.#####.###########.#.#.###.#.###.#.#######.#####.#.#.#.#.#.#####.#.###.#.###.#.#.#.###",
    "#.#...#...#.#...#...#.#.#.......#...#...#.....#.#...#.#.......#.........#.#...#...#.#...#.........#...#...#.#.#.....#...#.#.#.#.#...#...#...#",
    "###.#.#.###.#########.#.#.#######.###.#.#######.#.###.#########.#######.#.#####.###.#.#######.#####.#.#.###.#.###.###.#.#.#.#.#.#.###.###.#.#",
    "#...#.#...#.#.........#.#...#.....#.#...#.....#...#.............#.....#.#.....#.#...#.......#...#...#.#.#...#.#...#...#.#.#.#...#.#.#.#.#.#.#",
    "#.#.#.###.#.#.#.#######.#.#.#.#####.#.###.#.###.#####.###########.#.#.#.#######.#.#########.###.#.###.###.###.#.###.#####.#.#####.#.#.#.#.#.#",
    "#...#.....#.#.#.#...#.....#.#...#...#.#...#...#...........#.........#.#...#.....#.......#...#.....#.......#...#...#...........#.............#",
    "#.#.###.###.#.#.#.#.#.#.###.###.#.#.#.#.#####.###########.#.#.#.#########.#.#######.#####.###.#####.#############.#####.#####.#.###.#.#.#.#.#",
    "#.#.#...#...#.#.#.#.#...#...#...#...#.#.#...#.#.........#...#.#.#.......#.#.....#...#.....#...#.....#...........#...#...#...#.#...#...#...#.#",
    "#.#.###.#.#####.#.###.#.#.###.#####.#.#.###.#.#.###.###.#####.#.#.###.###.#.###.#####.#####.#.#.#####.#########.###.#.#.#.#.#####.#.###.#.#.#",
    "#.#...#.#.#.....#.....#...#...#.....#.#.....#.#.#.#...#.#.....#.#.#.#.#...#...#.......#.....#.#.#.........#...#.....#.#.#.#...#...#...#.#...#",
    "#.###.###.#.#########.#.###.#####.###.#####.#.#.#.#.#.#.#.#.#####.#.#.#.#.###.#########.###.#.###.#######.#.#.#######.#.#.###.#.#####.###.#.#",
    "#.#.#.....#...........#.#...#...............#.....#...#.#.#.#...#...#...#.#...#.....#.......#.#...#.....#...#...#.#...#.#.#.#...#...#.....#.#",
    "#.#.#######.#########.#.#.#.#.#.#########.#########.#.#.#.###.#.###.#####.#.###.#####.#.###.#.#.###.###.#######.#.#.###.#.#.#####.#.#####.#.#",
    "#...#.....#...#.....#.#.#.....#...#...#.#.#.........#...#.#...#.....#.#...#.#...#.....#...#.#...#...#.#.#...#.....#...#...#.....#.#...#...#.#",
    "###.#.###.#####.###.#.#.#.#.#.###.#.#.#.#.#.#########.###.#.#########.#.#.#.#.#.#.###.#.#.#.#####.###.#.#.#.#.#######.#####.###.#.#####.#.#.#",
    "#.#...#.#.#.....#.#.#.#.#.#.....#...#.#...#...#...#.#.#...#.....#.......#.#.#.#.....#...#.#...#...#...#.#.#.....#.....#.#...#.....#.........#",
    "#.#####.#.#.#####.#.#.###.#####.#####.#.#####.#.#.#.#.#.#######.###.#####.#.#######.#.###.###.#.###.###.#######.#.#####.#.#.#####.#.#####.###",
    "#.....#...#.#...#.....#.......#.....#.#.#...#...#.#...#.....#.#...#.....#.#...#.....#.#.#.#...#...#.....#.....#.#...#.#...#...#...#.#...#...#",
    "#.#.###.###.###.#.#####.###.#######.#.#.#.#.#####.#.#####.#.#.###.#######.###.#.###.#.#.#.#####.#.#.#####.###.#####.#.#.#####.#.###.#.#.#.###",
    "#.#...#.....#...#.#...#...#.#.....#.#.#...#.....#.#.#...#.#.#...#.#.....#...#.#.#...#.#.#.....#.#.#.......#...#.....#.#...#.#.#...#...#.#...#",
    "#.###.#####.#.###.#.#.###.###.###.#.#.#########.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.###.#.#####.###.#####.#####.#.#####.###.#.#.###.#####.#.#.#",
    "#.#.......#...#...#.#...#.#...#.#...#...#.....#...#...#...#...#...#.#.#...#.#...#.....#.....#...#.#.....#...#...#.......#...#.#...#...#.....#",
    "###.#.#####.#.#.###.###.#.#.###.#######.###.#.###.#########.###.###.#.#.#.#.#######.###.###.###.#.###.###.#.#####.#####.###.#.#.###.#.###.#.#",
    "#.............#.#.#.#.....#...#.......#...#.#...#.#...#...#.#...#...#.....#.......#.....#.#.#.#.#...#.#...#.#...#.........#.#.#.....#.#.....#",
    "#.###.#.#.#.#.#.#.#.#########.#.#####.###.#.###.#.#.#.#.#.###.###.#######.#######.#.#.###.#.#.#.###.#.#.###.#.#.#########.#.#.#######.#.#.#.#",
    "#.#.#.#.#...#...#.#.........#...#.....#...#...#...#.#...#.....#.#.......#...#.....#.#.#...#.#.#.#...#.#...#...#...#.....#...#...#...#.#.#...#",
    "#.#.#.#.###.#####.#.#.###.#.#####.#####.###.#.#####.###########.#.#####.#.#.#.#######.#.#.#.#.#.#.###.###.#######.#.###.#######.#.#.###.###.#",
    "#.#...#...........#.....#.#.....#...#.#.#.......#...#...#...#.....#...#.#.#.#.........#.#.#.#.#.#...#.#.....#...#.....#.......#.#.#.#...#...#",
    "#.###########.#########.#.#.###.###.#.#.#########.###.#.#.#.#.###.###.#.###.#.#####.###.#.#.#.#.#.#.###.#####.#.#####.#######.#.#.#.#.###.#.#",
    "#.....#.....#.#.......#.#...#...#...#.#...............#.#.#.#.#.......#...#...#...#.....#...#.#.#.#.....#...#.#...............#...#.#.#...#.#",
    "#.###.#.#.###.#.#####.#.#####.###.###.#############.#.###.#.#.#.#.#.#.###.#####.#.###.#######.#.###.#####.#.#.###############.#.###.#.#.###.#",
    "#...#...#.....#...#...#.....#.#...#...#...........#.#.....#.#.#.#...#.#.#.....#.#...#.........#...#...#...#.#...#.......#.....#.#...#...#...#",
    "###.#####.#####.#.#.#########.#.#####.#.#########.#.#######.#.###.###.#.###.#.#.###.#############.#####.###.###.#.#####.#.#.###.#.#######.#.#",
    "#...#.......#.....#.#.......#.#.#.....#.#.#...#...#.#.....#...#...#...#.....#...#.#...#.........#.#.....#.#...#.#...#.#...#.....#.........#.#",
    "#.###.###.#.#.###.#.#.#####.#.#.###.###.#.#.#.#.###.#.#########.###.###.#########.###.#.#######.#.#.#####.###.#.###.#.###########.#.#######.#",
    "#.#.......#.#.....#...#.......#...#...#.#.#.#.#.....#.#.......#.#.#.#...........#...#...#.......#...#.......#...#.#...#...............#.....#",
    "#.#######.#.#####.#####.#####.###.###.#.#.#.#.#######.#.###.#.#.#.#.#######.###.#.#.#####.#.#######.#.###.#.#.###.###.#.#########.#.#.#.###.#",
    "#.........#.#...#...#.......#...#...#.#.#...#.............#.#...#.#.#.......#...#.#.....#.#.........................................#...#.#.#",
    "#########.#.#.#.###.#########.#.###.#.#.###.###############.#####.#.#.#########.#.###.#.#.###.#####.#####.###.#.#.###.#.###.#.#.#.#.#####.#.#",
    "#.........#.#.#...#.........#.#.....#.#...#.......................#.#.........#.#...#.#.#...#.#...........#.....#.#...#...#...#.#.....#.....#",
    "#.#######.#.###.#.#########.#.#######.###.###########.###.###.#.###.#.#######.#.#.###.#.###.#.#.#.#.#.#.#.###.#####.###.#######.#.#.#.#.###.#",
    "#.......#.#.....#.#.........#.........................#.#.....#...#.#.....#...#.#.#...#...#...#.#...#.#.#.........#...#.#.......#...#.#.#...#",
    "#.#####.#.#######.#.#.###.#.###.#.#####.#####.#.#######.#########.#.#.#####.###.#.#.#####.#########.#.#.#.###.###.###.#.#.#######.#.###.###.#",
    "#.....#.#...#.....#.#.#...#...#.#.....#.....#...#.................#.#.#...#...#.#.#.#...#...........#.#.#...#...#.#...#.....................#",
    "#####.#.#.#.#.#####.#.#.#.#.#.#.#####.#####.###########.#.#.#.#####.###.#.#.#.#.###.#.#.#######.###.#.#.#####.#.#.#.###.#.#.###.#.#.#.#####.#",
    "#...#.#...#.#.....#.#.#.#.#.#.#...#.#.#...#.#.......#...#.#.#.#.....#...#.#.#.#...#.#.......#...#.....#.....#.#.............#.#.....#.....#.#",
    "#.###.###.#######.#.#.#.#.#.#####.#.#.###.#.#.#.###.#.###.#.#.#.#####.###.###.###.#.#######.#.###.#.#######.#.#####.#.###.#.#.###.#.#####.#.#",
    "#.....#.#.........#.#...#.#.....#.#.#.........................#...#...#...#...#...#.................#.....#...#...#.#.....#...#...........#.#",
    "#.#####.#############.###.#####.#.#.#####.#.#.###.###############.###.#.###.###.###.#.#########.###.#.###.###.#.#.#.#.#######.#.#.#.#######.#",
    "#S............................#...#.......#.....#.....................#.....#.......#.............#.....#.......#...........................#",
    "#############################################################################################################################################",
};

void draw_map(const Map& map)
{
    for (const auto& row: map)
        std::cout << row << "\n";
    std::cout << std::endl;
}

constexpr uint64_t invalid_score = std::numeric_limits<uint64_t>::max();
constexpr uint64_t unknown_score = invalid_score - 1;

std::pair<uint64_t, int> try_move(const Map& map, AllScores& all_scores, int x, int y, int dir, int nx, int ny, int max_steps)
{
    if (max_steps <= 0) return std::make_pair(invalid_score, 0);
    if (x < 1 || x + 1 >= nx || y < 1 || y + 1 >= ny) return std::make_pair(invalid_score, 0);

    auto& score = all_scores[dir][y][x];
    if (score.first != unknown_score)
    {
        if (score.first == invalid_score)
        {
            if (max_steps <= score.second) return std::make_pair(invalid_score, score.second);
        }
        else
        {
            if (max_steps >= score.second)
                return score;
        }
    }

    auto [dx, dy] = dxdy[dir];

    std::pair<uint64_t, int> min_score{score.first != unknown_score ? score.first : invalid_score, max_steps};

    auto score_new = try_move(map, all_scores, x + dx, y + dy, dir, nx, ny, max_steps - 1);
    if (score_new.first != invalid_score)
    {
        min_score.first = score_new.first + 1;
        min_score.second = score_new.second + 1;
    }

    int dir2 = dir == 0 ? 3 : dir - 1;
    score_new = try_move(map, all_scores, x + dy, y - dx, dir2, nx, ny, max_steps - 1);
    if (score_new.first != invalid_score)
    {
        score_new.first += 1001;
        if (score_new.first < min_score.first)
        {
            min_score.first = score_new.first;
            min_score.second = score_new.second + 1;
        }
    }

    int dir1 = dir == 3 ? 0 : dir + 1;
    score_new = try_move(map, all_scores, x - dy, y + dx, dir1, nx, ny, max_steps - 1);
    if (score_new.first != invalid_score)
    {
        score_new.first += 1001;
        if (score_new.first < min_score.first)
        {
            min_score.first = score_new.first;
            min_score.second = score_new.second + 1;
        }
    }

    score = min_score;

    return min_score;
}

uint32_t part1(const Map& map, AllScores& all_scores)
{
    int nx = map.front().size();
    int ny = map.size();

    all_scores.clear();
    all_scores.reserve(4);
    for (int k = 0; k < 4; k++)
    {
        auto& map_scores = all_scores.emplace_back();

        map_scores.reserve(ny);
        for (int y=0; y < ny; y++)
        {
            auto& row = map_scores.emplace_back();
            row.reserve(nx);
            for (int x=0; x < nx; x++)
            {
                map[y][x] == '#' ?
                    row.emplace_back(std::make_pair(invalid_score, std::numeric_limits<int>::max())) :
                    row.emplace_back(std::make_pair(unknown_score, std::numeric_limits<int>::max()));
            }
        }
    }

    int max_steps = 2;
    for (const auto& row: map)
        for (auto c: row)
            if (c == '.') max_steps++;

    // find the start and end positions
    int x_start, y_start;
    int x_end, y_end;
    for (int y = 0; y < ny; y++)
    {
        for (int x = 0; x < nx; x++)
        {
            if (map[y][x] == 'S')
            {
                x_start = x;
                y_start = y;
            }
            else if (map[y][x] == 'E')
            {
                x_end = x;
                y_end = y;
            }
        }
    }
    // std::cout << "Initial\n";
    // draw_map(map);

    for (auto& scores: all_scores)
    {
        scores[y_end][x_end].first = 0;
        scores[y_end][x_end].second = 0;
    }

    auto ret = try_move(map, all_scores, x_start, y_start, 0, nx, ny, max_steps);

    return ret.first;
}

void find_spots(Spots& spots, const AllScores& all_scores, int x, int y, int dir, int nx, int ny)
{
    static const std::array<uint32_t, 4> score_diffs{{1, 1001, 2001, 1001}};

    auto score = all_scores[dir][y][x].first;

    spots.emplace(x + y * nx);

    for (int k=0; k < 4; k++)
    {
        auto [dx, dy] = dxdy[dir];
        int x2{x + dx};
        int y2{y + dy};
        if (x2 >= 1 && x2 + 1 < nx && y2 >= 1 && y2 + 1 < ny)
        {
            auto& score2 = all_scores[dir][y2][x2];
            if (score2.first != invalid_score && score2.first + score_diffs[k] == score)
                find_spots(spots, all_scores, x2, y2, dir, nx, ny);
        }

        dir = dir == 3 ? 0 : dir + 1;
    }
}

int part2(const Map& map, const AllScores& all_scores)
{
    int nx = map.front().size();
    int ny = map.size();

    // find the start position
    int x_start, y_start;
    for (int y = 0; y < ny; y++)
    {
        for (int x = 0; x < nx; x++)
        {
            if (map[y][x] == 'S')
            {
                x_start = x;
                y_start = y;
            }
        }
    }

    Spots spots;
    find_spots(spots, all_scores, x_start, y_start, 0, nx, ny);

    return spots.size();
}

int main()
{
    AllScores sample_all_scores, all_scores;
    std::cout << part1(sample_map1, sample_all_scores) << std::endl;
    std::cout << part1(map, all_scores) << std::endl;
    std::cout << part2(sample_map1, sample_all_scores) << std::endl;
    std::cout << part2(map, all_scores) << std::endl;
    return 0;
}
