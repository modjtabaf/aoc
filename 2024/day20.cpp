
#include <algorithm>
#include <cassert>
#include <endian.h>
#include <iostream>
#include <limits>
#include <string>
#include <utility>
#include <vector>
#include <array>
#include <unordered_set>

using Map = std::vector<std::string>;
using Spots = std::unordered_set<int>;

std::array<std::pair<int, int>, 4> dxdy{{
    {1, 0},
    {0, 1},
    {-1, 0},
    {0, -1},
}};

Map sample_map{
    "###############",
    "#...#...#.....#",
    "#.#.#.#.#.###.#",
    "#S#...#.#.#...#",
    "#######.#.#.###",
    "#######.#.#...#",
    "#######.#.###.#",
    "###..E#...#...#",
    "###.#######.###",
    "#...###...#...#",
    "#.#####.#.###.#",
    "#.#...#.#.#...#",
    "#.#.#.#.#.#.###",
    "#...#...#...###",
    "###############",
};

Map problem_map{
    "#############################################################################################################################################",
    "###...#...#.......#.....#.....#.....#...###.......#...#...........#...............#...#.......#...#.....#.........#.....###.....###.....#...#",
    "###.#.#.#.#.#####.#.###.#.###.#.###.#.#.###.#####.#.#.#.#########.#.#############.#.#.#.#####.#.#.#.###.#.#######.#.###.###.###.###.###.#.#.#",
    "#...#.#.#...#...#.#.#...#...#.#...#.#.#.....#.....#.#.#.........#.#.......#.......#.#.#...#...#.#.#.#...#.....#...#...#...#...#...#...#.#.#.#",
    "#.###.#.#####.#.#.#.#.#####.#.###.#.#.#######.#####.#.#########.#.#######.#.#######.#.###.#.###.#.#.#.#######.#.#####.###.###.###.###.#.#.#.#",
    "#...#.#.......#.#.#.#.....#.#.###.#...#.....#.#...#.#.#.....#...#.......#.#.....#...#.###.#.###.#.#.#.#...###.#...###...#...#.#...#...#...#.#",
    "###.#.#########.#.#.#####.#.#.###.#####.###.#.#.#.#.#.#.###.#.#########.#.#####.#.###.###.#.###.#.#.#.#.#.###.###.#####.###.#.#.###.#######.#",
    "###.#.#...#.....#.#.#.....#.#.#...#.....###...#.#...#.#...#.#.........#...#...#.#.#...#...#...#.#.#.#.#.#...#.#...#...#.#...#.#.###...#.....#",
    "###.#.#.#.#.#####.#.#.#####.#.#.###.###########.#####.###.#.#########.#####.#.#.#.#.###.#####.#.#.#.#.#.###.#.#.###.#.#.#.###.#.#####.#.#####",
    "#...#...#.#.....#...#.......#...#...#...#...###.#.....###.#.###...###...#...#...#.#.#...#...#.#.#.#.#.#...#.#.#.###.#...#.#...#.....#.#.#...#",
    "#.#######.#####.#################.###.#.#.#.###.#.#######.#.###.#.#####.#.#######.#.#.###.#.#.#.#.#.#.###.#.#.#.###.#####.#.#######.#.#.#.#.#",
    "#...#...#.....#.#...............#.....#.#.#...#.#.#.......#.#...#.#...#.#.....#...#...#...#...#.#.#.#...#.#.#.#.....#...#...#...#...#.#.#.#.#",
    "###.#.#.#####.#.#.#############.#######.#.###.#.#.#.#######.#.###.#.#.#.#####.#.#######.#######.#.#.###.#.#.#.#######.#.#####.#.#.###.#.#.#.#",
    "#...#.#.....#.#...#.....#.....#.#.......#...#.#.#.#.......#.#...#.#.#.#.#.....#.......#.#.....#.#.#.#...#.#...#.......#.......#...#...#...#.#",
    "#.###.#####.#.#####.###.#.###.#.#.#########.#.#.#.#######.#.###.#.#.#.#.#.###########.#.#.###.#.#.#.#.###.#####.###################.#######.#",
    "#.....#...#.#.#...#...#.#...#.#.#.###...#...#...#.#.....#.#.#...#...#...#...#...#.....#.#...#.#.#...#.....#.....#.....#.......###...#.......#",
    "#######.#.#.#.#.#.###.#.###.#.#.#.###.#.#.#######.#.###.#.#.#.#############.#.#.#.#####.###.#.#.###########.#####.###.#.#####.###.###.#######",
    "#.......#...#...#...#.#.....#.#.#.....#.#.....#...#...#.#.#.#...........#...#.#.#.....#.#...#...#...........#...#...#.#.#.....#...#...#.....#",
    "#.#################.#.#######.#.#######.#####.#.#####.#.#.#.###########.#.###.#.#####.#.#.#######.###########.#.###.#.#.#.#####.###.###.###.#",
    "#...............#...#.#.....#.#.#.......###...#.#.....#...#.#.......#...#...#.#.#...#.#.#.......#.###.....#...#...#.#...#...###...#.#...#...#",
    "###############.#.###.#.###.#.#.#.#########.###.#.#########.#.#####.#.#####.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#######.#####.#.#.###.###",
    "#.........#...#.#.###.#.#...#...#...#...#...#...#.........#.#.#.....#.....#.#.#.#.#.#.#...###...#.....#...#.#.....#.#.....#...###.#.#.#...###",
    "#.#######.#.#.#.#.###.#.#.#########.#.#.#.###.###########.#.#.#.#########.#.#.#.#.#.#.###.###.#########.###.#.#####.#.###.###.###.#.#.#.#####",
    "#.......#.#.#...#...#...#.#.......#.#.#.#...#.#...#...###.#.#.#.###.....#.#.#.#...#...#...#...#.........#...#...#...#...#.....#...#...#.....#",
    "#######.#.#.#######.#####.#.#####.#.#.#.###.#.#.#.#.#.###.#.#.#.###.###.#.#.#.#########.###.###.#########.#####.#.#####.#######.###########.#",
    "#...#...#.#.....#...#...#...#.....#.#.#.#...#.#.#.#.#.#...#.#.#...#...#.#.#.#...#...#...#...#...#...#...#.#.....#.#...#.......#...#.........#",
    "#.#.#.###.#####.#.###.#.#####.#####.#.#.#.###.#.#.#.#.#.###.#.###.###.#.#.#.###.#.#.#.###.###.###.#.#.#.#.#.#####.#.#.#######.###.#.#########",
    "#.#.#...#.......#...#.#.#...#.....#.#.#...#...#.#.#.#.#.#...#...#...#.#.#.#...#.#.#...###...#.#...#...#.#.#...###.#.#.#.......#...#.###...###",
    "#.#.###.###########.#.#.#.#.#####.#.#.#####.###.#.#.#.#.#.#####.###.#.#.#.###.#.#.#########.#.#.#######.#.###.###.#.#.#.#######.###.###.#.###",
    "#.#.....#...#...#...#.#.#.#.#...#.#.#.....#...#.#...#...#.....#...#.#.#...#...#.#.....#...#.#.#.#.....#.#.#...#...#.#.#.#.....#...#.....#...#",
    "#.#######.#.#.#.#.###.#.#.#.#.#.#.#.#####.###.#.#############.###.#.#.#####.###.#####.#.#.#.#.#.#.###.#.#.#.###.###.#.#.#.###.###.#########.#",
    "#.#.....#.#.#.#.#...#.#.#.#...#...#...#...#...#.....#.........#...#.#.....#...#.#.....#.#.#.#.#.#...#...#.#...#.#...#...#.#...#...#...#...#.#",
    "#.#.###.#.#.#.#.###.#.#.#.###########.#.###.#######.#.#########.###.#####.###.#.#.#####.#.#.#.#.###.#####.###.#.#.#######.#.###.###.#.#.#.#.#",
    "#.#.#...#.#...#...#.#.#.#.........#...#...#.#...###.#.###...###...#.#...#.#...#.#.#...#.#.#.#.#...#.#...#.#...#.#.....#...#.#...#...#...#.#.#",
    "#.#.#.###.#######.#.#.#.#########.#.#####.#.#.#.###.#.###.#.#####.#.#.#.#.#.###.#.#.#.#.#.#.#.###.#.#.#.#.#.###.#####.#.###.#.###.#######.#.#",
    "#.#.#...#.#.......#.#.#.###.......#...#...#.#.#...#.#.....#.#...#.#.#.#.#.#.#...#.#.#...#.#.#...#.#.#.#...#.....#.....#.#...#.#...#...###.#.#",
    "#.#.###.#.#.#######.#.#.###.#########.#.###.#.###.#.#######.#.#.#.#.#.#.#.#.#.###.#.#####.#.###.#.#.#.###########.#####.#.###.#.###.#.###.#.#",
    "#...###.#.#.......#.#.#...#.........#.#...#...#...#.....###.#.#...#...#.#.#.#.#...#.#.....#...#...#.#.#...........#...#.#.....#.....#...#...#",
    "#######.#.#######.#.#.###.#########.#.###.#####.#######.###.#.#########.#.#.#.#.###.#.#######.#####.#.#.###########.#.#.###############.#####",
    "#.......#.#.......#...#...#...#...#.#.#...#.....#...#...#...#.......#...#.#.#.#...#.#...#.....#.....#.#...#.........#...#.....#.......#.....#",
    "#.#######.#.###########.###.#.#.#.#.#.#.###.#####.#.#.###.#########.#.###.#.#.###.#.###.#.#####.#####.###.#.#############.###.#.#####.#####.#",
    "#.#.......#.#.....#...#...#.#...#...#...#...#...#.#.#...#...#.....#.#...#.#...#...#.###.#.....#.....#.#...#.#.....#...#...#...#.....#.......#",
    "#.#.#######.#.###.#.#.###.#.#############.###.#.#.#.###.###.#.###.#.###.#.#####.###.###.#####.#####.#.#.###.#.###.#.#.#.###.#######.#########",
    "#...#.....#.#.#...#.#...#...#...........#.#...#.#.#.#...#...#...#...###.#.....#...#...#.#...#.....#...#...#.#.###...#...###.........###...###",
    "#####.###.#.#.#.###.###.#####.#########.#.#.###.#.#.#.###.#####.#######.#####.###.###.#.#.#.#####.#######.#.#.#########################.#.###",
    "#...#...#...#.#.#...###.....#.#.......#.#.#.#...#.#.#...#.....#.......#...#...#...#...#...#.......#...###...#.......#.....#.......###...#...#",
    "#.#.###.#####.#.#.#########.#.#.#####.#.#.#.#.###.#.###.#####.#######.###.#.###.###.###############.#.#############.#.###.#.#####.###.#####.#",
    "#.#.###.......#...#...#.....#.#.#...#...#...#...#.#.#...#.....#...#...###.#.###...#.#.....#.........#.........#.....#.#...#...#...#...#.....#",
    "#.#.###############.#.#.#####.#.#.#.###########.#.#.#.###.#####.#.#.#####.#.#####.#.#.###.#.#################.#.#####.#.#####.#.###.###.#####",
    "#.#.............#...#.#...#...#...#.....#...###...#...###.....#.#...#.....#...#...#...#...#.................#...#...#.#.###...#...#.#...#...#",
    "#.#############.#.###.###.#.###########.#.#.#################.#.#####.#######.#.#######.###################.#####.#.#.#.###.#####.#.#.###.#.#",
    "#.#...........#.#...#...#.#.#...........#.#.#...#...###...#...#.....#.....#...#...#...#...#.................###...#...#...#.#.....#.#...#.#.#",
    "#.#.#########.#.###.###.#.#.#.###########.#.#.#.#.#.###.#.#.#######.#####.#.#####.#.#.###.#.###################.#########.#.#.#####.###.#.#.#",
    "#...#.....#...#.....#...#...#...#.........#...#...#...#.#...#.....#...#...#.....#.#.#...#.#...#.......#...#...#.....#...#...#.....#...#...#.#",
    "#####.###.#.#########.#########.#.###################.#.#####.###.###.#.#######.#.#.###.#.###.#.#####.#.#.#.#.#####.#.#.#########.###.#####.#",
    "#...#...#.#.....#...#...#...###...#################...#.#...#...#.#...#.....#...#.#.#...#.#...#.#...#...#.#.#.......#.#.#...#...#.....#...#.#",
    "#.#.###.#.#####.#.#.###.#.#.#######################.###.#.#.###.#.#.#######.#.###.#.#.###.#.###.#.#.#####.#.#########.#.#.#.#.#.#######.#.#.#",
    "#.#.....#...###...#...#.#.#.#..S###################...#...#.#...#.#.....###.#...#.#.#.....#.....#.#.......#.#.....#...#...#...#.#...#...#...#",
    "#.#########.#########.#.#.#.#.#######################.#####.#.###.#####.###.###.#.#.#############.#########.#.###.#.###########.#.#.#.#######",
    "#.........#...#.......#...#...#########...#.....#####...#...#...#.#.....#...#...#...###.....#.....#...#.....#...#...#...#.....#.#.#.#.......#",
    "#########.###.#.#######################.#.#.###.#######.#.#####.#.#.#####.###.#########.###.#.#####.#.#.#######.#####.#.#.###.#.#.#.#######.#",
    "#.......#.#...#...............#########.#...#...#######E#...#...#.#...###...#.#.......#...#.#.....#.#...#.....#.......#.#.#...#.#.#...#...#.#",
    "#.#####.#.#.#################.#########.#####.#############.#.###.###.#####.#.#.#####.###.#.#####.#.#####.###.#########.#.#.###.#.###.#.#.#.#",
    "#.#...#...#...#...#...........#.....###.#.....###.....#...#.#.###...#.....#...#.....#.#...#.......#.#...#...#.#.......#...#...#...###...#...#",
    "#.#.#.#######.#.#.#.###########.###.###.#.#######.###.#.#.#.#.#####.#####.#########.#.#.###########.#.#.###.#.#.#####.#######.###############",
    "#.#.#...#...#.#.#.#.........#...###.....#...#...#...#.#.#.#.#.....#.#.....###...#...#...#...#.......#.#.....#.#.....#...#...#...............#",
    "#.#.###.#.#.#.#.#.#########.#.#############.#.#.###.#.#.#.#.#####.#.#.#######.#.#.#######.#.#.#######.#######.#####.###.#.#.###############.#",
    "#.#.###...#.#.#.#.#...#...#...#...#.........#.#...#.#.#.#.#...#...#.#.#.......#...#.....#.#...###...#.......#.#...#...#.#.#.#.....#...#...#.#",
    "#.#.#######.#.#.#.#.#.#.#.#####.#.#.#########.###.#.#.#.#.###.#.###.#.#.###########.###.#.#######.#.#######.#.#.#.###.#.#.#.#.###.#.#.#.#.#.#",
    "#...#...#...#...#...#...#.......#...#.........#...#.#...#...#...###.#.#.#.......#...###...###...#.#.#...#...#...#...#.#.#.#...###.#.#.#.#...#",
    "#####.#.#.###########################.#########.###.#######.#######.#.#.#.#####.#.###########.#.#.#.#.#.#.#########.#.#.#.#######.#.#.#.#####",
    "###...#...#...#...#...#...#.....#.....#...#...#.....#.....#.......#...#...#.....#...#.........#...#...#...#...#...#...#...###.....#.#.#.....#",
    "###.#######.#.#.#.#.#.#.#.#.###.#.#####.#.#.#.#######.###.#######.#########.#######.#.#####################.#.#.#.###########.#####.#.#####.#",
    "#...#.....#.#.#.#.#.#...#...###...#...#.#.#.#.......#...#.#...#...#...#...#.........#.........#...#.........#...#...........#.......#.....#.#",
    "#.###.###.#.#.#.#.#.###############.#.#.#.#.#######.###.#.#.#.#.###.#.#.#.###################.#.#.#.#######################.#############.#.#",
    "#...#.#...#.#.#.#...#...............#...#...#.....#.....#...#.#...#.#...#.#.......#.....#...#...#...#.......................#...........#.#.#",
    "###.#.#.###.#.#.#####.#######################.###.###########.###.#.#####.#.#####.#.###.#.#.#########.#######################.#########.#.#.#",
    "###...#...#.#.#...#...#...#...#...........###.#...###.......#.....#.#...#.#...#...#...#...#.......###...............#.......#...#.....#.#...#",
    "#########.#.#.###.#.###.#.#.#.#.#########.###.#.#####.#####.#######.#.#.#.###.#.#####.###########.#################.#.#####.###.#.###.#.#####",
    "#.......#.#.#.....#...#.#.#.#.#.#.......#.....#.......#.....#.....#.#.#.#.....#.......#.........#...............#...#.#.....#...#...#...#...#",
    "#.#####.#.#.#########.#.#.#.#.#.#.#####.###############.#####.###.#.#.#.###############.#######.###############.#.###.#.#####.#####.#####.#.#",
    "#.....#...#.#.......#...#...#...#.....#.....#.........#.#...#.#...#...#.........#.....#.#.......#...#.........#.#.....#.....#.#.....#.....#.#",
    "#####.#####.#.#####.#################.#####.#.#######.#.#.#.#.#.###############.#.###.#.#.#######.#.#.#######.#.###########.#.#.#####.#####.#",
    "#.....#...#.#.....#...................#...#.#.......#.#...#...#.....#.........#...#...#.#...#...#.#...#.......#.............#.#.......#.....#",
    "#.#####.#.#.#####.#####################.#.#.#######.#.#############.#.#######.#####.###.###.#.#.#.#####.#####################.#########.#####",
    "#.....#.#...###...#...#.................#.#.........#...............#.......#.#...#.....#...#.#...#...#...........#...........#...#...#.....#",
    "#####.#.#######.###.#.#.#################.#################################.#.#.#.#######.###.#####.#.###########.#.###########.#.#.#.#####.#",
    "#.....#.#...#...#...#...#...............#...###...#...#.....#...#...###...#.#...#.###...#.....###...#...........#...#...........#...#.......#",
    "#.#####.#.#.#.###.#######.#############.###.###.#.#.#.#.###.#.#.#.#.###.#.#.#####.###.#.#########.#############.#####.#######################",
    "#.....#.#.#.#...#.###...#.......#...###...#.....#.#.#.#.#...#.#.#.#.....#.#.....#.#...#.#.......#.............#.#...#.........#.....#.......#",
    "#####.#.#.#.###.#.###.#.#######.#.#.#####.#######.#.#.#.#.###.#.#.#######.#####.#.#.###.#.#####.#############.#.#.#.#########.#.###.#.#####.#",
    "#.....#.#.#...#...#...#...#...#...#.....#.#...#...#.#.#.#.###.#.#...#.....#.....#...#...#.#...#.#...........#.#.#.#...#.....#...#...#.#.....#",
    "#.#####.#.###.#####.#####.#.#.#########.#.#.#.#.###.#.#.#.###.#.###.#.#####.#########.###.#.#.#.#.#########.#.#.#.###.#.###.#####.###.#.#####",
    "#.......#.#...#...#.#...#...#...#.......#...#.#.###.#.#.#...#.#.#...#.#...#.....#.....###...#.#.#.........#...#...#...#...#.#...#.....#.....#",
    "#########.#.###.#.#.#.#.#######.#.###########.#.###.#.#.###.#.#.#.###.#.#.#####.#.###########.#.#########.#########.#####.#.#.#.###########.#",
    "#.........#...#.#.#...#.....#...#...###...###.#.#...#.#.#...#.#.#.#...#.#.#...#.#.........#...#...........#...#...#.......#...#.#...#...#...#",
    "#.###########.#.#.#########.#.#####.###.#.###.#.#.###.#.#.###.#.#.#.###.#.#.#.#.#########.#.###############.#.#.#.#############.#.#.#.#.#.###",
    "#.#...#.....#...#.#.........#.#...#...#.#...#...#...#.#.#...#.#...#.#...#.#.#.#.#.........#.........#.......#...#.............#.#.#.#.#...###",
    "#.#.#.#.###.#####.#.#########.#.#.###.#.###.#######.#.#.###.#.#####.#.###.#.#.#.#.#################.#.#######################.#.#.#.#.#######",
    "#...#.#.#...#...#.#.........#...#.....#...#...#.....#.#.#...#.#.....#...#.#.#.#.#.#...#...###...###...#.....#.................#...#.#.......#",
    "#####.#.#.###.#.#.#########.#############.###.#.#####.#.#.###.#.#######.#.#.#.#.#.#.#.#.#.###.#.#######.###.#.#####################.#######.#",
    "#...#...#.....#.#...........#.......#.....#...#.....#.#.#...#.#.#...#...#.#.#.#.#.#.#.#.#...#.#.#.....#...#...#...#...#...........#.#.....#.#",
    "#.#.###########.#############.#####.#.#####.#######.#.#.###.#.#.#.#.#.###.#.#.#.#.#.#.#.###.#.#.#.###.###.#####.#.#.#.#.#########.#.#.###.#.#",
    "#.#...........#.......#...#...#.....#...#...###...#.#.#.#...#.#.#.#.#...#.#.#.#.#.#.#.#...#.#.#.#...#.###.......#...#...#...#.....#...###...#",
    "#.###########.#######.#.#.#.###.#######.#.#####.#.#.#.#.#.###.#.#.#.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###################.#.#.###############",
    "#...........#.###...#...#.#.#...#.....#.#.#...#.#.#.#.#.#.#...#...#.#...#.#.#...#.#.#...#.#.#.#.#...#.#...#.........#...#.#.#...........#...#",
    "###########.#.###.#.#####.#.#.###.###.#.#.#.#.#.#.#.#.#.#.#.#######.#.###.#.#####.#.###.#.#.#.#.#.###.#.#.#.#######.#.#.#.#.###########.#.#.#",
    "#...........#.....#.......#.#...#...#.#.#.#.#.#.#...#.#.#.#.....#...#.###...#.....#.###.#.#...#.#.#...#.#.#.......#...#...#.......#.....#.#.#",
    "#.#########################.###.###.#.#.#.#.#.#.#####.#.#.#####.#.###.#######.#####.###.#.#####.#.#.###.#.#######.###############.#.#####.#.#",
    "#.....#.......#.....#.....#.#...#...#.#.#...#.#.#.....#.#.....#.#...#.......#.#...#...#...###...#.#.#...#.......#.......#.......#...#...#.#.#",
    "#####.#.#####.#.###.#.###.#.#.###.###.#.#####.#.#.#####.#####.#.###.#######.#.#.#.###.#######.###.#.#.#########.#######.#.#####.#####.#.#.#.#",
    "###...#.#.....#.###.#...#.#.#...#.#...#...#...#.#.....#.....#.#...#...#...#.#...#...#.#.......#...#.#.......#...#.....#...#...#.#...#.#...#.#",
    "###.###.#.#####.###.###.#.#.###.#.#.#####.#.###.#####.#####.#.###.###.#.#.#.#######.#.#.#######.###.#######.#.###.###.#####.#.#.#.#.#.#####.#",
    "#...#...#.#...#.#...#...#.#.###.#.#...#...#.#...#.....#...#.#.#...#...#.#...###...#.#.#.#.....#.###...#.....#...#.###.......#...#.#...#...#.#",
    "#.###.###.#.#.#.#.###.###.#.###.#.###.#.###.#.###.#####.#.#.#.#.###.###.#######.#.#.#.#.#.###.#.#####.#.#######.#.###############.#####.#.#.#",
    "#...#...#...#...#...#.###.#.#...#.###.#.###...#...#...#.#...#.#...#...#.........#.#...#...#...#...#...#.......#.#.......#.......#.#...#.#.#.#",
    "###.###.###########.#.###.#.#.###.###.#.#######.###.#.#.#####.###.###.###########.#########.#####.#.#########.#.#######.#.#####.#.#.#.#.#.#.#",
    "###...#.#...........#.#...#.#.....#...#.....###...#.#.#.....#.#...#...#.....#.....#.....#...#.....#.#...#...#.#.......#...#.....#.#.#...#...#",
    "#####.#.#.###########.#.###.#######.#######.#####.#.#.#####.#.#.###.###.###.#.#####.###.#.###.#####.#.#.#.#.#.#######.#####.#####.#.#########",
    "#####...#...#...#...#.#.#...#.....#.....#...#...#.#.#.#...#.#.#...#...#.###.#.....#.#...#...#.....#.#.#.#.#...###.....#...#.#...#.#.....#...#",
    "###########.#.#.#.#.#.#.#.###.###.#####.#.###.#.#.#.#.#.#.#.#.###.###.#.###.#####.#.#.#####.#####.#.#.#.#.#######.#####.#.#.#.#.#.#####.#.#.#",
    "###...#.....#.#.#.#.#.#.#...#...#.......#...#.#...#.#.#.#.#.#.#...###.#...#.#...#...#.#...#.#...#.#.#.#.#.......#.....#.#...#.#.#.#.....#.#.#",
    "###.#.#.#####.#.#.#.#.#.###.###.###########.#.#####.#.#.#.#.#.#.#####.###.#.#.#.#####.#.#.#.#.#.#.#.#.#.#######.#####.#.#####.#.#.#.#####.#.#",
    "#...#...#.....#...#.#.#.....#...#.......#...#.....#.#.#.#.#.#.#.....#.....#.#.#.....#.#.#...#.#...#.#.#...#...#...###.#.......#...#.....#.#.#",
    "#.#######.#########.#.#######.###.#####.#.#######.#.#.#.#.#.#.#####.#######.#.#####.#.#.#####.#####.#.###.#.#.###.###.#################.#.#.#",
    "#.........#.........#.###...#...#.#.....#.#...#...#.#.#.#.#.#.#...#...#.....#.....#.#.#.....#.....#.#.###.#.#.#...#...#...#.....#.......#.#.#",
    "###########.#########.###.#.###.#.#.#####.#.#.#.###.#.#.#.#.#.#.#.###.#.#########.#.#.#####.#####.#.#.###.#.#.#.###.###.#.#.###.#.#######.#.#",
    "#...........#.....#...#...#.....#.#.....#...#.#.#...#.#.#.#.#.#.#.....#.#.....#...#...###...#...#.#.#...#...#.#...#.#...#.#...#.#.........#.#",
    "#.###########.###.#.###.#########.#####.#####.#.#.###.#.#.#.#.#.#######.#.###.#.#########.###.#.#.#.###.#####.###.#.#.###.###.#.###########.#",
    "#.#.......#...#...#.###.....#...#...#...#.....#...###...#.#.#.#.#.......#.#...#.......#...#...#.#.#.#...#.....#...#...###...#.#.#...#...#...#",
    "#.#.#####.#.###.###.#######.#.#.###.#.###.###############.#.#.#.#.#######.#.#########.#.###.###.#.#.#.###.#####.###########.#.#.#.#.#.#.#.###",
    "#...#.....#...#...#.#.......#.#.....#...#...............#.#.#...#.#.....#.#.#...#...#.#.....#...#.#.#...#.....#...........#.#.#.#.#...#.#...#",
    "#####.#######.###.#.#.#######.#########.###############.#.#.#####.#.###.#.#.#.#.#.#.#.#######.###.#.###.#####.###########.#.#.#.#.#####.###.#",
    "###...#...#...###.#.#.....#...#.....###...#.......#.....#.#...#...#.#...#.#.#.#.#.#.#.......#.....#.#...#.....#...#.......#.#.#.#.....#.#...#",
    "###.###.#.#.#####.#.#####.#.###.###.#####.#.#####.#.#####.###.#.###.#.###.#.#.#.#.#.#######.#######.#.###.#####.#.#.#######.#.#.#####.#.#.###",
    "#...#...#.#...#...#.#.....#...#...#.#.....#.....#.#.###...#...#...#.#...#.#...#...#.#.....#.....#...#...#...#...#.#.......#.#.#.#...#.#.#...#",
    "#.###.###.###.#.###.#.#######.###.#.#.#########.#.#.###.###.#####.#.###.#.#########.#.###.#####.#.#####.###.#.###.#######.#.#.#.#.#.#.#.###.#",
    "#.#...#...#...#...#.#.#...#...#...#...#...#...#.#.#...#...#...#...#.#...#.....#.....#...#...#...#...#...#...#.#...#...#...#.#.#.#.#.#.#.#...#",
    "#.#.###.###.#####.#.#.#.#.#.###.#######.#.#.#.#.#.###.###.###.#.###.#.#######.#.#######.###.#.#####.#.###.###.#.###.#.#.###.#.#.#.#.#.#.#.###",
    "#...###.....#####...#...#...###.........#...#...#.....###.....#.....#.........#.........###...#####...###.....#.....#...###...#...#...#...###",
    "#############################################################################################################################################",
};

using MapScores = std::vector<std::vector<int>>;

void draw_map(const Map& map)
{
    for (const auto& row: map)
        std::cout << row << "\n";
    std::cout << std::endl;
}

constexpr int invalid_score = std::numeric_limits<int>::max();
constexpr int unknown_score = invalid_score - 1;
constexpr int locked_score  = invalid_score - 2;
constexpr int highest_valid_score  = invalid_score - 10;

int try_move(MapScores& map_scores, int x, int y, int dir, int nx, int ny, bool find_best)
{
    if (x < 0 || x >= nx || y < 0 || y >= ny) return invalid_score;

    auto& score = map_scores[y][x];
    if (score != unknown_score)
        return score;
    score = locked_score;

    auto [dx, dy] = dxdy[dir];

    bool all_invalid{true};
    int min_score{highest_valid_score};

    auto score_new = try_move(map_scores, x + dx, y + dy, dir, nx, ny, find_best);
    if (score_new < min_score - 1)
    {
        min_score = score_new + 1;
        if (!find_best)
        {
            score = min_score;
            return min_score;
        }
    }
    all_invalid = all_invalid && score_new == invalid_score;

    int dir1 = dir == 3 ? 0 : dir + 1;
    score_new = try_move(map_scores, x - dy, y + dx, dir1, nx, ny, find_best);
    if (score_new < min_score - 1)
    {
        min_score = score_new + 1;
        if (!find_best)
        {
            score = min_score;
            return min_score;
        }
    }
    all_invalid = all_invalid && score_new == invalid_score;

    int dir2 = dir == 0 ? 3 : dir - 1;
    score_new = try_move(map_scores, x + dy, y - dx, dir2, nx, ny, find_best);
    if (score_new < min_score - 1)
    {
        min_score = score_new + 1;
        if (!find_best)
        {
            score = min_score;
            return min_score;
        }
    }
    all_invalid = all_invalid && score_new == invalid_score;

    int dir3 = dir + 2;
    if (dir3 > 3) dir3 -= 4;
    score_new = try_move(map_scores, x - dx, y - dy, dir3, nx, ny, find_best);
    if (score_new < min_score - 1)
    {
        min_score = score_new + 1;
        if (!find_best)
        {
            score = min_score;
            return min_score;
        }
    }
    all_invalid = all_invalid && score_new == invalid_score;

    if (all_invalid)
    {
        score = invalid_score;
        return invalid_score;
    }

    score = min_score == highest_valid_score ? unknown_score : min_score;
    return min_score;
}

void init_map_scores(const Map& map, MapScores& map_scores)
{
    int nx = map.front().size();
    int ny = map.size();

    map_scores.clear();
    map_scores.reserve(ny);
    for (int y=0; y < ny; y++)
    {
        auto& row = map_scores.emplace_back();
        row.reserve(nx);
        for (int x=0; x < nx; x++)
            row.emplace_back(map[y][x] == '#' ? invalid_score : unknown_score);
    }
}

int solve(Map& map, bool find_best, int n_save, int dxy_min, int dxy_max)
{
    int nx = map.front().size();
    int ny = map.size();

    int max_steps = 2;
    for (const auto& row: map)
        max_steps += std::count(row.begin(), row.end(), '.');

    // find the start and end positions
    int x_start, y_start;
    int x_end, y_end;
    for (int y = 0; y < ny; y++)
    {
        for (int x = 0; x < nx; x++)
        {
            if (map[y][x] == 'S')
            {
                x_start = x;
                y_start = y;
            }
            else if (map[y][x] == 'E')
            {
                x_end = x;
                y_end = y;
            }
        }
    }
    // std::cout << "Initial\n";
    // draw_map(map);

    MapScores forward_map_scores;
    init_map_scores(map, forward_map_scores);
    forward_map_scores[y_end][x_end] = 0;

    MapScores reverse_map_scores;
    init_map_scores(map, reverse_map_scores);
    reverse_map_scores[y_start][x_start] = 0;

    auto best_forward_score = try_move(forward_map_scores, x_start, y_start, 0, nx, ny, find_best);
    auto best_reverse_score = try_move(reverse_map_scores, x_end, y_end, 0, nx, ny, find_best);
    assert(best_forward_score == best_reverse_score);

    for (int y = 0; y < ny; y++)
        for (int x = 0; x < nx; x++)
        {
            if (map[y][x] != '#')
            {
                try_move(forward_map_scores, x, y, 0, nx, ny, find_best);
                try_move(reverse_map_scores, x, y, 0, nx, ny, find_best);
            }
        }

    int n_cheats{0};

    struct S
    {
        int score;
        int x, y;
    };
    std::vector<S> sorted_forward_scores, sorted_reverse_scores;
    sorted_forward_scores.reserve(max_steps);
    sorted_reverse_scores.reserve(max_steps);
    for (int y = 0; y < ny; y++)
        for (int x = 0; x < nx; x++)
        {
            if (map[y][x] == '#') continue;
            sorted_forward_scores.emplace_back(forward_map_scores[y][x], x, y);
            sorted_reverse_scores.emplace_back(reverse_map_scores[y][x], x, y);
        }
    std::sort(sorted_forward_scores.begin(), sorted_forward_scores.end(),
        [](const S& s1, const S& s2) -> bool
        {
            return s1.score < s2.score;
        });
    std::sort(sorted_reverse_scores.begin(), sorted_reverse_scores.end(),
        [](const S& s1, const S& s2) -> bool
        {
            return s1.score < s2.score;
        });

    int max_target_score = best_forward_score - n_save;
    for (const auto& reverse_score: sorted_reverse_scores)
    {
        if (reverse_score.score >= max_target_score) break;
        for (const auto& forward_score: sorted_forward_scores)
        {
            if (forward_score.score >= max_target_score) break;

            int dx = forward_score.x > reverse_score.x ? forward_score.x - reverse_score.x : reverse_score.x - forward_score.x;
            int dy = forward_score.y > reverse_score.y ? forward_score.y - reverse_score.y : reverse_score.y - forward_score.y;
            int dxy = dx + dy;

            if (dxy < dxy_min || dxy > dxy_max) continue;

            auto score = forward_score.score + reverse_score.score + dxy;
            if (score <= max_target_score) n_cheats++;
        }
    }

    return n_cheats;
}

void find_spots(Spots& spots, const MapScores& map_scores, int x, int y, int dir, int nx, int ny, bool just_one)
{
    auto score = map_scores[y][x];

    spots.emplace(x + y * nx);

    for (int k=0; k < 4; k++)
    {
        auto [dx, dy] = dxdy[dir];
        int x2{x + dx};
        int y2{y + dy};
        if (x2 >= 0 && x2 < nx && y2 >= 0 && y2 < ny)
        {
            auto& score2 = map_scores[y2][x2];
            if (score2 != invalid_score && score2 + 1 == score)
            {
                find_spots(spots, map_scores, x2, y2, dir, nx, ny, just_one);
                if (just_one) break;
            }
        }

        dir = dir == 3 ? 0 : dir + 1;
    }
}

int main()
{
    std::cout << solve(sample_map, true, 12, 2, 2) << std::endl;
    std::cout << solve(problem_map, true, 100, 2, 2) << std::endl;
    std::cout << solve(problem_map, true, 100, 0, 20) << std::endl;

    return 0;
}
